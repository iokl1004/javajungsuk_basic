ch11-1 컬렉션 프레임웍(Collections Framework)
- 컬렉션(Collection) : 여러 객체(데이터)를 모아 놓은 것을 의미
- 프레임웍(framework) : frame 틀, work 작업 / 표준화, 정형화된 체계적인 프로그래밍 방식
- 컬렉션 프레임웍(Collections Framework) 
컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공
java.util패키지에 포함. JDK1.2부터 제공
-----------------------------------------------------------------------------
ch11-2 컬렉션 프레임웍의 핵심 인터페이스

인터페이스	특징
List		순서가 있는 데이터의 집합. 데이터의 중복을 허용한다.
		예) 대기자 명단
		구현 클래스 : ArrayList, LinkedList, Stack, Vector등

Set		순서를 유지하지 않는 데이터의 집합, 데이터의 중복을 허용하지 않는다.
		예) 양의 정수 집합, 소수의 집합
		구현 클래스 : HashSet, TreeSet등

Map		키(Key)와 값(Value)의 쌍(Pair)으로 이루어진 데이터의 집합 순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다.
		예) 우편번호, 지역번호(전화번호)
		구현 클래스 : HashMap, TreeMap, Hashtable, Properties 등
-----------------------------------------------------------------------------
ch11-3 Collection 인터페이스의 메서드
1. List : 순서O, 중복O
2. Set : 순서X, 중복X
3. Map : 순서X 중복(키X, 값O)

List와 Set의 공통부분은 Collection

메서드				설명
boolean add(Object o)		지정된 객체(o) 또는 Collection(c)의 객체들을 Collection에
boolean AddAll(Coleection c)		추가한다.

void clear()			Collection의 모든 객체를 삭제한다.

boolean contains(Object o)		지정된 객체(o)또는 Collection의 객체들이 Collection에 포함되어
boolean containsAll(Collection c)	있는지 확인한다.

boolean equals(Object o)		동일한 Collection인지 비교한다.
int hashCode()			Collection의 hash code를 반환한다.
boolean isEmpty()			Collection이 비어있는지 확인한다.
lterator lterator(Object o)		Collection의 lterator를 얻어서 반환한다.

boolean remove(Object o)		지정된 객체를 삭제한다.
boolean removeAll(Collection c)	지정된 Collection에 포함된 객체들을 삭제한다.

boolean retainAll(Collection c)	지정된 Collection에 포함된 객체만을 남기고 다른 객체들은 Collection에서 삭제한다.
				이 작업으로 인해 Collection에 변화가 잇으면 true를 그렇지 않으면 false를 반환한다.

int size()				Collection에 저장된 객체의 개수를 반환한다.
Objecet[] toArrat()			Collection에 저장된 객체를 객체배열(Object[])로 반환한다.
Objecet[] toArrat(Object[]a)		지정된 배열에 Collection의 객체를 저장해서 반환한다.
-----------------------------------------------------------------------------
ch11-4 List인터페이스 - 순서O, 중복O
	List
Vector / ArrayList / LinkedList
Stack

ArrayList, LinkedList가 진또배기이며 핵심!!! 잘 알아두자

<그림 ch11-4-1 참고>
-----------------------------------------------------------------------------
ch11-5 SET인터페이스 - 순서X, 중복 X
	Set
HashSEt	SortedSet
	TreeSEt

HashSet, TreeSet 이 핵심!

* Set인터페이스의 메서드 - Collection인터페이스와 동일
<그림 ch11-5-1 참고>

* 집합과 관련된 메서드(Collection에 변화가 있으며 true, 아니면 false를 반환)
<그림 ch11-5-1 참고>
-----------------------------------------------------------------------------
ch11-6 Map인터페이스 - 순서X, 중복(키X, 값O)
		Map
Hashtable	HashMap		SortedMap
		LinkedHashMap	TreeMap

핵심은 HashMap, TreeMap이 핵심!
Hashtable은 옛날버전이고 HashMap은 최신버전!
Hashtable은 동기화가 되어있고, HashMap은 동기화가 안되어있지만, 동기화를 처리할수있는 기능이 있음.

Map인터페이스의 메서드
<그림 ch11-6-1 참고>
-----------------------------------------------------------------------------
ch11-7 ArrayList
- ArrayList는 기존의 Vector를 개선한 것으로 구현원리와 기능적으로 동일
   ArrayList와 달리 Vector는 자체적으로 동기화처리가 되어 있다.
- List인터페이스를 구현하므로, 저장순서가 유지되고 중복을 허용한다.
- 데이터의 저장공간으로 배열을 사용한다.(배열기반)

	   List
Cevtor	ArrayList	LinkedList
Stack
-----------------------------------------------------------------------------
ch11-8 ArrayList의 메서드
<그림 ch11-8-1 참고>
-----------------------------------------------------------------------------
ch11-9 ArrayList의 메서드 (예제)
-----------------------------------------------------------------------------
ch11-10 ArrayList에 저장된 객체의 삭제과정
- ArrayList에 저장된 세 번째 데이터(data[2])를 삭제하는 과정. list.remove(2);를 호출
① 삭제할 데이터 아래의 데이터를 한 칸씩 위로 복사해서 삭제할 데이터를 덮어쓴다.

② 데이터가 모두 한 칸씩 이동했으므로 마지막 데이터는 null로 변경한다.
	data[size-1] = null;

③ 데이터가 삭제되어 데이터의 갯수가 줄었으므로 size의 값을 감소시킨다.
	size--;
※ 마지막 데이터를 삭제하는 경우, ①의 과정 (배열의 복사)은 필요없다.
<그림 ch11-10-1 참고>

- ArrayList에 저장된 첫 번째 객체부터, 삭제하는 경우(배열 복사 발생)
<그림 ch11-10-2 참고>

- ArrayList에 저장된 마지막 객체부터 삭제하는 경우(배열 복사 발생안함) (빠름)
<그림 ch11-10-3 참고>
-----------------------------------------------------------------------------
ch11-12 LinkedList - 배열의 장단점
장점 : 배열은 구조가 간단하고 데이터를 읽는 데 걸리는 시간 ( 접근시간, access time)이 짧다.

단점 1 : 크기를 변경할 수 없다.
- 크기를 변경해야 하는 경우 새로운 배열을 생성 후 데이터를 복사해야함.
- 크기 변경을 피하기 위해 충분히 큰 배열을 생성하면, 메모리가 낭비됨.

단점 2 : 비순차적인 데이터의 추가, 삭제에 시간이 많이 걸린다.
- 데이터를 추가하거나 삭제하기 위해, 다른 데이터를 옮겨야 함.
- 그러나 순차적인 데이터 추가(끝에 추가)와 삭제(끝부터 삭제)는 빠르다.

ch11-12 LinkedList - 배열의 단점을 보완 ( 크기변경안되고, 추가삭제시간이 많이 걸린다.)
- 배열과 달리 링크드 리스트는 불연속적으로 존재하는 데이터를 연결(link)

- 데이터의 삭제 : 단 한 번의 참조변경만으로 가능
<그림 ch11-12-1 참고>

- 데이터의 추가 : 한번의 Node객체생성과 두 번의 참조변경만으로 가능
<그림 ch11-12-1 참고>

3.2 LinkedList - 이중 연결 리스트
- 링크드 리스트(linked list) : 연결리스트. 데이터 접근성이 나쁨
<그림 ch11-12-2 참고>

- 더블리 링크드 리스트(doubly linked list) - 이중 연결리스트, 접근성 향상
<그림 ch11-12-2 참고>

- 더블리 써큘러 링크드 리스트(doubly circular linked list) - 이중 원형 연결리스트
<그림 ch11-12-2 참고>

3.3 ArrayList vs LinkedList - 성능 비교
① 순차적으로 데이터를 추가/삭제 - ArrayList가 빠름
② 비순차적으로 데이터를 추가/삭제 - LinkedList가 빠름
③ 접근시간(access time) - ArrayList가 빠름
	인덱스가 n인 데이터의 주소 = 배열의 주소 + n * 데이터 타입의 크기

컬렉션		읽기(접근시간)	추가/삭제		비고
ArrayList		빠르다		느리다		순차적인 추가삭제는 더 빠름. 비효율적인 메모리 사용(성능이 좋아서, 배열을 크게 잡기때문)
LinkedList 	느리다		빠르다		데이터가 많을수록 접근성이 떨어짐 (하나씩 이동해서 가야하기때문에..)

ArrayList 배열기반 ( 연속적 ) , LinkedList 연결기반 ( 불연속적 )
-----------------------------------------------------------------------------
ch11-15 스택과 큐(Stack & Queue)
- 스택(Stack) : LIFO구조, 마지막에 저장된 것을 제일먼저 꺼내게 된다. ( Last In First Out ), 저장 ( push ), 추출 ( pop )
- 큐(Queue) : FIFO구조, 제일 먼저 저장한 것을 제일 먼저 꺼내게 된다. 저장 ( offer ), 추출 ( poll )
-----------------------------------------------------------------------------
ch11-16 스택과 큐(Stack & Queue)의 메서드

스택
메서드			설명
boolean empty()		Stack이 비어있는지 알려준다.
Object peek()		Stack 맨 위에 저장된 객체를 반환. pop()과 달리 Stack에서 객체를 꺼내지는 않음.(비었을 때는 EmptyStackException 발생)
Object pop()		Stack의 맨 위에 저장된 객체를 꺼낸다. (비었을 때는 EmptyStackException 발생)
Object push(Object item)	Stack에 객체(item)을 저장한다.
int search(Object o)	Stack에서 주어진 객체(o)를 찾아서 그 위치를 반환. 못찾으면 -1을 반환. (배열과 달리 위치는 0이 아닌 1부터 시작)

큐
메서드			설명
booelan add(Object o)	지정된 객체를 Queue에 추가한다. 성공하면 true를 반환. 저장공간이 부족하면 lilegaStateException발생
Object remove()		Queue에서 객체를 꺼내 반환. 비어있으면 NoSuchElementException발생
Object element()		삭제없이 요소를 읽어온다. peek와 달리 Queue가 비었을 때 NoSuchElementException발생
boolean offer(Object o)	Queue에 객체를 저장, 성공하면 true, 실패하면 false를 반환
Object poll()		Queue에서 객체를 꺼내서 반환, 비어있으면 null을 반환
Object peek()		삭제없이 요소를 읽어 온다. Queue가 비어있으며 null을 반환

add, remove, element는 예외발생! offer, pool, peek은 예외발생 안함!
-----------------------------------------------------------------------------
ch11-17 없음.....
-----------------------------------------------------------------------------
ch11-18 인터페이스를 구현한 클래스 찾기 (예제)
-----------------------------------------------------------------------------
ch11-19 스택과 큐(Stack & Queue)의 활용
스택의 활용 예 - 수식계산, 수식괄호검사, 워드프로세스의 undo/redo, 웹브라우저의 뒤로 앞으로
큐의 활용 예 - 최근사용문서, 인 쇄작업 대기목록, 버퍼
-----------------------------------------------------------------------------
ch11-20~21 스택과 큐(Stack & Queue)의 활용 (예제)
-----------------------------------------------------------------------------
ch11-22 Iterator, ListIterator, Enumeration
- 컬렉션에 저장된 데이터를 접근하는데 사용되는 인터페이스
- Enumeration은 Iterator의 구버젼
- ListIterator는 Iterator의 접근성을 향상시킨 것 (단방향 → 양방향)
- 메서드 <그림 ch11-22-1 참고>

- 컬렉션에 저장된 저장된 요소들을 읽어오는 방법을 표준화한 것
- 컬렉션에 iterator()를 호출해서 Iterator를 구현한 객체를 얻어서 사용.

	List list = new ArrayList();	//다른 컬렉션으로 변경할 때는 이 부분만 고치면 된다.\
	Iterator it = list.iterator();

	while(it.hasNext())	//bollean hasNext, 읽어올 요소가 있는지 확인
		System.out.println(it.next());
	}
-----------------------------------------------------------------------------
ch11-23 Iterator, ListIterator, Enumeration (예제)
-----------------------------------------------------------------------------
ch11-24 Map과 Itertaor
- Map에는 iterator()가 없다. keySet(), entrySet(), values()를 호출해야함
예)
	Map map = new HashMap();
		...
	Iterrator it = map.entrySet().iterator();
-----------------------------------------------------------------------------
ch11-25 Arrays(1/4) - 배열을 다루기 편리한 메서드(static)제공
1. 배열의 출력 - toString()
2. 배열의 복사 - copyOf(), copyOfRange()
int[] arr = {0,1,2,3,4}
int[] arr2 = Arrays.copyOf(arr, arr.length);	//arr2 = [0,1,2,3,4]
int[] arr3 = Arrays.copyOf(arr, 3);		//arr3 = [0,1,2]
int[] arr4 = Arrays.copyOf(arr, 7);		//arr4 = [0,1,2,3,4,0,0]
int[] arr5 = Arrays.copyOfRange(arr, 2, 4);	//arr5 = [2,3]	<- 4는 불포함
int[] arr6 = Arrays.copyOfRange(arr, 0, 7);	//arr6=[0,1,2,3,4,0,0];
-----------------------------------------------------------------------------
ch11-26 Arrays(2/4) - 배열을 다루기 편리한 메서드(static) 제공
3. 배열 채우기 - fill(), setAll()
int[] arr = new int[5];
Arrays.fill(arr,9);	// arr=[9,9,9,9,9]
Arrays.setAll(arr, (i) -> (int)(Math.random()*5)+1);	//arr=[1,5,2,1,1]

4. 배열의 정렬과 검색 - sort(), binarySearch()
int[] arr = { 3, 2, 0, 1, 4};
int idx = Arrays.binarySearch(arr, 2);	//idx=-5 <- 잘못된 결과

Array.sort(arr);	//배열 arr을 정렬한다.
System.out.println(Arrays.toString(arr));	// [0,1,2,3,4]
int idx = Arrays.binarySearch(arr,2);	// idx=2 <- 올바른 결과
-----------------------------------------------------------------------------
ch11-27 Arrays(3/4) - 배열을 다루기 편리한 메서드(static) 제공
5. 다차원 배열의 출력 - deepToString();
int[] arr = {0,1,2,3,4};
int[][] arr2D = {{11,12}, {21,22}};
System.out.println(Arrays.toString(arr));	//	[0,1,2,3,4]
System.out.println(Arrays.deepToString(arr2d));	//	[[11, 12], [21,22]]

6. 다차원 배열의 비교 - deepEquals()
String[][] str2D = new String[][]{{"aaa,"bbb"},{"AAA","BBB"}};
String[][] str2D2 = new String[][]{{"aaa,"bbb"},{"AAA","BBB"}};

System.out.println(Arrays.equals(str2D, str2D2));		//false
System.out.println(Arrays.deepEqulas(str2D, str2D2));	//true
-----------------------------------------------------------------------------
ch11-28 Arrays(4/4) - 배열을 다루기 편리한 메서드(static) 제공
7. 배열을 List로 변환 - asList(Object... a)
List list = Arrays.asList(new Integer[]{1,2,3,4,5});	//list = [1, 2, 3, 4, 5]
List list = Arrays.asList(1,2,3,4,5);		//list = [1, 2, 3, 4, 5]
list.add(6);	//UnsupportedOperationException 예외 발생

List list = new ArrayList(Arrays.asList(1,2,3,4,5));

8. 람다와 스트림(14장) 관련 - parallelXXX(), spliterator(), stream()
-----------------------------------------------------------------------------
ch11-29 Arrays (예제)
-----------------------------------------------------------------------------
ch11-30 Comparator와 Comparable
- 객체 정렬에 필요한 메서드(정렬기준 제공)를 정의한 인터페이스
Comparable	기본 정렬기준을 구현하는데 사용.
comparator	기본 정렬기준 외에 다른 기준으로 정렬하고자 할때 사용

public interface Comparator {
	int compare(Object o1, Object o2);	//o1, o2 두 객체를 비교
	boolean equals(Object obj);		// equals를 오버라이딩 하라는 뜻
}
public interface comparable {
	int compareTo(Object o);	//주어진 객체(o)를 자신과 비교
}

- compare()와 compareTo()는 두 객체의 비교결과를 반환하도록 작성
같으면  o, 오른쪽이 크면 음수(-), 작으면 양수(+)

public final class Integer extends Number implements Comparable {
	...
	public int compareTo(Integer anotherInteger) {
		int v1 = this.value;
		int v2 = anotherInteger.value;
		//같으면 0, 오른쪽 값이 크면 -1, 작으면 1을 반환
		return (v1 < v2 ? -1 : (v1==v2? 0 : 1));
	}
	...
}
-----------------------------------------------------------------------------
ch11-31 Comparator와 Comparable (예제)
-----------------------------------------------------------------------------
ch11-32 Integer와 Comparable
	public final class Integer extends Number implements Comparable {
		...
		public int compareTo(Object o) {
			return compareTo((Integer)o);
		}

		public int compareTo(Integer anotherInteger) {
			int thisVal = this.value;
			int anotherVal = anotherInteger.value;

			// 비교하는 값이 크면 -1, 같으면 0, 작으면 1을 반환한다.
			return (thisVal<anotherVal ? -1 : (thisVal==anotherVal ? 0 : 1));
		}
	..
	}
-----------------------------------------------------------------------------
ch11-33 없음...
-----------------------------------------------------------------------------
ch11-34 HashSet - 순서X, 중복X (list는 순서O, 중복O)
HashSet
	- Set인터페이스를 구현한 대표적인 컬렉션 클래스
	- 순서를 유지하려면, LinkedHashSet클래스를 사용하면 된다.
TreeSet
	- 범위 검색과 정렬에 유리한 컬렉션 클래스 ( 범위 검색이란 예를들어 10보다 크고 20보다 작은경우 )
	- HashSet보다 데이터 추가, 삭제에 시간이 더 걸림

HashSet 주요 메서드
<그림 11-34-1 참고>
-----------------------------------------------------------------------------
ch11-35~36 HashSet (예제)
-----------------------------------------------------------------------------
ch11-37 HashSet
- HashSet은 객체를 저장하기 전에 기존에 같은 객체가 있는지 확인
  같은 객체가 없으면 저장하고, 잇으면 저장하지 않는다.
- boolean add(Object o)는 저장할 객체의 equals()와 hashCode()를 호출
  equlas()와 hashCode()가 오버라이딩 되어 있어야 함

class Person {
	String name;	//iv
	int age;		//iv

	Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	public String toString() {
		return name + ":" + age;
	}
}

public boolean equals(Object obj) {
	if(!(obj instanceof Person)) return false;

	Person tmp = (Person)obj;

	return name.equals(tmp.name) && age==tmp.age;
}

public int hashCode() {
	return (name+age.hashCode();
}
-----------------------------------------------------------------------------
ch11-38 HashSet (예제)
-----------------------------------------------------------------------------
ch-39 TreeSet - 범위 탐색, 정렬
- 이진 탐색 트리(binary search tree)로 구현. 범위 탐색과 정렬에 유리.
- 이진 트리는 모든 노드가 최대 2개의 하위 노드를 갖음
   각 요소(node)가 나무(tree)형태로 연결(LinkedList의 변형)

class TreeNode {
	TreeNode left;	//왼쪽 자식노드
	Object element;	//저장할 객체
	TreeNode right;	//오른쪽 자식노드
}
-----------------------------------------------------------------------------
ch11-40 이진 탐색 트리(binary search tree)
- 부모보다 작은 값은 왼쪽, 큰 값은 오른쪽에 저장
- 데이터가 많아질 수록 추가, 삭제에 시간이 더 걸림(비교 횟수 증가)

class TreeNode {
	TreeNode left;
	Object element;
	TreeNode right;
}
-----------------------------------------------------------------------------
ch11-41 TreeSet - 데이터 저장과정 boolean add(Object o)
※ TreeSet에 7, 4, 9, 1, 5의 순서로 데이터를 저장하면, 아래의 과정을 거친다.
(루트부터 트리를 따라 내려가며 값을 비교, 작으면 왼쪽, 크면 오른쪽에 저장)
-----------------------------------------------------------------------------
ch11-42 TreeSet - 주요 생성자와 메서드
<그림 ch11-42-1 참고>
-----------------------------------------------------------------------------
ch11-43~44 TreeSet (예제)
-----------------------------------------------------------------------------
ch11-45 TreeSet 예제3 범위 검색 subSet(), headSet(), tailSet()
<그림 ch11-45-1 참고>
-----------------------------------------------------------------------------
[알아두면 좋아요] 트리 순회(tree traversal)
- 이진 트리의 모든 노드를 한번씩 읽는 것을 트리 순회라고 한다.
- 전위, 중위 후위 순회법이 있으며, 중위 순회하면 오름차순으로 정렬된다.
단점 : 추가, 삭제 시간이 오래걸린다!!
-----------------------------------------------------------------------------
ch11-46 HashMap과 Hashtable - 순서X, 중복(키X, 값O)
- Map 인터페이스를 구현, 데이터를 키와 값의 쌍으로 저장
- HashMap(동기화X)은 HashTable(동기화O)의 신버젼

			Map
	Hashtable	HashMap		SortedMap
			LinkedHashMap	TreeMap
- HashMap
 - Map 인터페이스를 구현한 대표적인 컬렉션 클래스
 - 순서를 유지하려면, LinkedHashMap클래스를 사용하면 된다.
- TreeMap
 - 범위 검색과 정렬에 유리한 컬렉션 클래스
 - HashMap보다 데이터 추가, 삭제에 시간이 더 걸림
-----------------------------------------------------------------------------
ch11-47 HashMap의 키(key)와 값(value)
- 해싱(hashing)기법으로 데이터를 저장. 데이터가 많아도 검색이 빠르다.
- Map인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
	키(key)	컬렉션 내의 키(key) 중에서 유일해야 한다.
	값(value)	키(key)와 달리 데이터의 중복을 허용한다.

비객체지향적인 코드
Object[] key;
Object[] value;

객체지향적인 코드
Entry[] table;
class Entry {
	Object key;
	Object value;
}
-----------------------------------------------------------------------------
해싱(hasing) - (1/3) 환자정보관리
해싱리난 한마디로 해쉬함수를 이용해서 데이터를 저장 & 읽어오기

환자정보관리가 너무 많은데 어떻게하지....
년도 별로 캐비넷에 환자정보를 넣어두자!!
??? : 환자정보좀 찾아주세요. 주민번호는 72...
간호사 : 72년생이면 캐비넷 7번 서랍에 있겠네!!!

72xxxx-xxxxxxx -> 해시함수 (hash function) -> 7
-----------------------------------------------------------------------------
해싱(hasing) - (2/3)
- 해시함수(hash function)로 해시테이블(hash table)에 데이터를 저장, 검색
 배열의 장점 : 접근성이 좋다
 링크드리스트의 장점 : 변경에 유리하다
- 해시테이블은 배열과 링크드 리스트가 조합된 형태
-----------------------------------------------------------------------------
해싱(hasing) - (3/3)
- 해시테이블에 저장된 데이터를 가져오는 과정

① 키로 해시함수를 호출해서 해시코드를 얻는다.
② 해시코드(해시함수의 반환값)에 대응하는 링크드리스트를 배열에서 찾는다.
③ 링크드리스트에서 키와 일치하는 데이터를 찾는다.
 ※ 해시함수는 같은 키에 대해 항상 같은 해시코드를 반환해야 한다.
     서로 다른 키일지라도 같은 값의 해시코드를 반환할 수도 있다.
-----------------------------------------------------------------------------
ch11-48 HashMap - 주요 메서드
<그림 ch 11-48-1 참고>
-----------------------------------------------------------------------------
ch11-49~51 HashMap (예제)
-----------------------------------------------------------------------------
ch11-52~54 Collections(1/2) - 컬렉션을 위한 메서드(static)를 제공	//static : Objects, Arrays, Collections
1. 컬렉션 채우기, 복사, 정렬, 검색 - fill(), copy(), osrt(), binarySearch() 등
2. 컬렉션의 동기화 - synchronizedXXX()
	static Collection synchronizedCollection(Collection c)
	static List synchronizedList(List l)
	static Set synchronizedSet(Set s)
	static Map synchronizedMap(Map m)
	static SortedSet synchronizedSortedSet(SortedSet s)
	static SortedMap synchronizedSortedMap(SortedMap m)

사용법 
List syncList = Collections.syncronizedList(new ArrayList(...));

3. 변경불가(readOnly) 컬렉션 만들기 - unmodifiableXXX()
	static Collection unmodifiableCollection(Collection c)
	static List unmodifiableList(List l)
	static Set unmodifiableSet(Set s)
	static Map unmodifiableMap(Map m)
	static SortedSet unmodifiableSortedSet(SortedSet s)
	static SortedMap unmodifiableSortedMap(SortedMap m)
-----------------------------------------------------------------------------
ch11-52~54 Collections(2/2) - 컬렉션을 위한 메서드(static)를 제공	//static : Objects, Arrays, Collections
4. 싱글톤 컬렉션 만들기 - singletonXXX()

	static List singletonList(List l)
	static Set singletonSet(Set s)	//singletionSet이 아님에 주의
	static Map singletonMap(Map m)

5. 한 종류의 객체만 저장하는 컬렉션 만들기 - checkedXXX();
	static Collection checkedCollection(Collection c, Class type)
	static List checkedList(List l, Class type)
	static Set checkedSet(Set s, Class type)
	static Map checkedMap(Map m, Class keyType, Class valueType)
	static Queue checkedQueue(Queue queue, Class type)
	static NavigableSet checkedNavigableSet(NavigableSet s, Class type)
	static SortedSet checkedSortedMap(SortedSet s, Class type)
-----------------------------------------------------------------------------
ch11-55 Collections (예제)
-----------------------------------------------------------------------------
ch11-56 컬렉션 클래스 정리 & 요약 (1/2)
<그림 ch 11-56-1 참고>