ch4 조건문과 반복문
조건문 : 조건을 만족할때만 { }를 수행(0~1번)
if ( score > 60 ) {
	System.out.println("합격입니다.");
	System.out.println("축하드립니다.");
}

반복문 : 조건을 만족하는 동안 { }를 수행 (0~n번)
int i = 10;
while (i-- > 0) {
	System.out.println(i);
}
--------------------------------------------------------------------------
ch4-1 if문
조건식이 참(true)일 때, 괄호{ } 안의 문장들을 수행한다.

if (조건식) { 
 // 조건식이 참(true) 일때 수행될 문장들을 적는다.
}

if (scroe > 60) {
 System.out.println("합격입니다.");
}
--------------------------------------------------------------------------
ch4-2 조건식의 다양한 예
90 <= x && x <=100	// 정수 x가 90이상 100이하일때
x < 0 || x > 100		// 정수 x가 0보다 작거나 100보다 클 때
x%3==0 && x%2!=0	// 정수 x가 3의 배수지만, 2의배수는 아닐때
ch = 'y' || ch=='Y'		// 문자 ch가 'y'또는 'Y'일 때
ch==' ' || ch== '\t' || ch == '\n' //문자 ch가 공백이거나 탭 또는 개행 문자일 때
'A' <= ch && ch <= 'Z'	// 문자 ch가 대문자일 때
'a' <= ch && ch <= 'z'	// 문자 ch가 소문자일 때
'0' <= ch && ch <= '9'	// 문자 ch가 숫자일 때
str.equals("yes")		//문자열 str의 내용이 "yes"일 때(대소문자 구분)
str.equalsIngnoreCase("yes") //문자열 str의 내용이 "yes"일 때(대소문자 구분안함)
--------------------------------------------------------------------------
ch4-3 블럭 { }
여러 문장을 하나로 묶어주는 것

if(score > 60)
{ //블럭의 시작
	System.out.println("합격입니다."); //탭(tab)에 의한 들여쓰기 가독성을 높히기 위함
} //블럭의 끝
--------------------------------------------------------------------------
ch4-4 if-else문
둘 중의 하나 - 조건식이 참일 때와 거짓일 때로 나눠서 처리
if (조건식) {
	// 조건식이 참(true)일 때 수행될 문장들을 적는다.
} else {
	// 조건식이 거짓(false)일 때 수행될 문장들을 적는다.
}

if (input==0) {
	System.out.println("0입니다.");
} else {
	System.out.println("0이 아닙니다.");
}
--------------------------------------------------------------------------
ch4-5 if-else if문
여러 개 중의 하나 - 여러 개의 조건식을 포함한 조건식
if (조건식1) {
	// 조건식1의 연산결과가 참일 때 수행될 문장들을 적는다.
} else if (조건식2) {
	// 조건식2의 연산결과가 참일 때 수행될 문장들을 적는다.
} else if (조건식3) {
	// 조건식3의 연산결과가 참일 때 수행될 문장들을 적는다.
} else {  // 마지막은 보통 else 블럭으로 끝나며, else블럭은 생략가능하다.
	// 위의 어느 조건식도 만족하지 않을 때 수행될 문장들을 적는다.
}
--------------------------------------------------------------------------
ch4-6 if-else if문 (예제)
--------------------------------------------------------------------------
ch4-7 중첩 if문 - if문 안의 if
if (조건식1) {
	// 조건식1의 연산결과가 true일 때 수행될 문장들을 적는다.
	if (조건식2) {
		//조건식1과 조건식2가 모두 true일때 수행될 문장들
	} else {
		//조건식1이 true이고, 조건식2가 false일 때 수행되는 문장들
	}
} else {
	//조건식 1이 false일 때 수행되는 문장들
}
--------------------------------------------------------------------------
ch4-8 중첩 if문 (예제)
--------------------------------------------------------------------------
ch4-9 switch문
처리해야 하는 경우의 수가 많을 때 유용한 조건문
switch (조건식) {
	case 값1 :
		//조건식의 결과가 값 1과 같은 경우 수행될 문장들
		break;
	case 값2 :
		//조건식의 결과가 값 2과 같은 경우 수행될 문장들
		break; //switch문을 벗어난다.
	default :
		//조건식의 결과와 일치하는 case문이 없을 때 수행될 문장들
}
--------------------------------------------------------------------------
ch4-10 switch문의 제약조건
1. switch문의 조건식 결과는 정수 또는 문자열이어야 한다. (jdk 버전 1.7 부터는 문자열도 허용되었음)
2. case문의 값은 정수, 상수(문자 포함), 문자열만 가능하며, 중복되지 않아야 한다.
--------------------------------------------------------------------------
ch4-11 switch문 (예제)
--------------------------------------------------------------------------
ch4-12 임의의 정수 만들기
Math.random() - 0.0과 1.0 사이의 임의의 double값을 반환
 0.0 <= Math.random() < 1.0

만약 1~3 정수를 뽑고싶다면?
1. 각 변에 3을 곱한다.
 0.0 * 3 <= Math.random() * 3 < 1.0 * 3
 0.0 <= Math.random() * 3 < 3.0

2. 각 변을 int형으로 변환한다.
 (int) 0.0 <= (int) (Math.random() * 3) < (int) 3.0
 0 <= (int)(Math.random() * 3) < 3

3. 각 변에 1을 더한다.
 0 + 1 <= (int)(Math.random() * 3) + 1 < 3 + 1
 1 <= (int)(Math.random() * 3) + 1 < 4
--------------------------------------------------------------------------
ch4-13 for문
조건을 만족하는 동안 블럭{ }을 반복 - 반복횟수를 알 때 적합

for (초기화; 조건식; 증감식) {
	//수행될 문장
}

for(int i=1; i<=5; i++) { // 1부터 5까지 1씩 증가
	System.out.println("I can do it.");
}
--------------------------------------------------------------------------
ch4-14 for문 (예제)
--------------------------------------------------------------------------
ch4-15 중첩 for문
for문 내에 또 다른 for문을 포함 시킬수 있다.
for(int i=2;i<=9;i++) {
	for(int j=1;j<=9;j++) {
		System.out.println(i+"*"+j+"="=(i*j));
	}
}
--------------------------------------------------------------------------
ch4-16 while문
조건을 만족 시키는 동안 블럭{}을 반복 - 반복횟수 모를 때

while (조건식) {
	//조건식의 연산결과가 참(true)인 동안, 반복될 문장들을 적는다.
}
--------------------------------------------------------------------------
ch4-17 while문 (예제)
--------------------------------------------------------------------------
ch4-18 while문 (예제)
--------------------------------------------------------------------------
ch4-19 do-while문
블럭{}을 최소한 한 번 이상 반복 - 사용자 입력받을 때 유용
do {
	//조건식의 연산결과가 참일 때 수행될 문장들을 적는다. ( 처음 한 번은 무조건 실행)
} while (조건식); 
--------------------------------------------------------------------------
ch4-20 break문
자신이 포함된 하나의 반복문을 벗어난다.
--------------------------------------------------------------------------
ch4-21 continue문
자신이 포함된 반복문의 끝으로 이동 - 다음 반복으로 넘어감
전체 반복 중에서 특정 조건시 반복을 건너뛸 때 유용
--------------------------------------------------------------------------
ch4-22 continue문 (예제)
--------------------------------------------------------------------------
ch4-23 이름붙은 반복문 (사용을 잘 안함...)
Loop문
반복문에 이름을 붙여서 하나 이상의 반복문을 벗어날 수 있다.