ch12-1 지네릭스(Generics)란?
- 컴파일시 타입을 체크해 주는 기능(compile-time type check) - JDK1.5
- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌

	// Tv 객체만 저장할 수 있는 ArrayList를 생성
	ArrayList<Tv> tvList = new ArrayList<Tv>();

	tvList.add(new Tv());	// OK
	tvList.add(new Audio());	// 컴파일 에러. Tv 외에 다른 타입은 저장 불가

지네릭스의 장점
 1. 타입 안정성을 제공한다.
 2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해 진다.
-----------------------------------------------------------------------------
ch12-2 타입 변수
- 클래스를 작성할 때, Object타입 대신 타입 변수(E)를 선언해서 사용.
	public class ArrayList extends AbstractList { //일부 생략
		privave transient Object[] elementData;
		public boolean add(Object o) { /* 내용생략 */ }
		public Object get(int index) { /* 내용생략 */ }
		...
	}
위에 코드가... 아래 처럼 변경됨

	public class ArrayList<E> extends AbstractList<E> { //일부 생략
		private transient E[] elementData;
		public boolean add(E o)	{ /* 내용생략 */ }
		public E get(int index)	{ /* 내용생략 */ }
		...
	}
Element의 E를 따옴
-----------------------------------------------------------------------------
ch12-3 타입 변수에 대입하기
- 객체를 생성시, 타입 변수(E) 대신 실제 타입(Tv)를 지정(대입)
	// 타입 변수 E 대신에 실제 타입 Tv를 대입
	ArrayList<Tv> tvList = new ArrayList<Tv>(); // Tv는 Type Value의 줄임말.

	public class ArrayList<E> extends AbstractList<E> { //일부 생략
		private transient E[] elementData;
		public boolean add(E o)	{ /* 내용생략 */ }
		public E get(int index)	{ /* 내용생략 */ }
		...
	}

		public class ArrayList extends AbstractList { //일부 생략
		private transient Tv[] elementData;
		public boolean add(Tv o)	{ /* 내용생략 */ }
		public Tv get(int index)	{ /* 내용생략 */ }
		...
	}

- 타입 변수 대신 실제 타입이 지정되면, 형변환 생략가능
ArrayList tvList = new ArrayList();
tvList.add(new Tv());
Tv t = (Tv)tvList.get(0);	//Object 불일치!

ArrayList<Tv> tvList = new ArrayList<Tv>();
tvList.add(new Tv());
Tv t = tvList.get(0); //형변환 필요
-----------------------------------------------------------------------------
ch12-4 지네릭스 용어
Box<T>	지네릭 클래스, 'T 의 Box'또는 'T Box' 라고 읽는다.
T	타입 변수 또는 타입 매개변수.(T는 타입 문자)
Box	원시 타입(raw type)	일반클래스 → 지네릭클래스

class Box<T> {}	//Box는 원시타입	Box<T> 는 지네릭 클래스

Box<String> b = new Box<String>();

Box<String>은 지네릭 타입 호출
-----------------------------------------------------------------------------
ch12-5 지네릭 타입과 다형성
- 참조 변수와 생성자의 대입된 타입은 일치해야 한다.
	ArrayList<Tv>	list = new ArrayList<Tv>();	//Ok. 일치
	ArrayList<Product>	list = new ArrayList<Tv>();	//에러. 불일치

- 지네릭 클래스간의 다형성은 성립.(여전히 대입된 타입은 일치해야)
	List<Tv> list = new ArrayList<Tv>();	//Ok. 다형성. ArrayList가 List를 구현
	List<Tv> list = new LinkedList<Tv>();	//Ok. 다형성. LinkedList가 List를 구현

- 매개변수의 다형성도 성립.
	ArrayList<Product> list = newArrayList<Product>();
	list.add(new Product());
	list.add(new Tv());		//OK.
	list.add(new Audio());	//OK.

	boolean add(E e) { ... }
	boolean add(Product e) { ... }
-----------------------------------------------------------------------------
ch12-6 지네릭 타입과 다형성(예제)
-----------------------------------------------------------------------------
ch12-7 Iterator<E>
- 클래스를 작성할 때, Object타입 대신 T와 같은 타입 변수를 사용

일반 클래스
public interface Iterator {
	boolean hasNext();
	Objecet next();
	void remove();
}

지네릭 클래스
public interface Iterator<E> {
	boolean hasNext();
	E next();
	void remove();
}
-----------------------------------------------------------------------------
ch12-8 HashMap<K,V>
- 여러 개의 타입 변수가 필요한 경우, 콤마(,)를 구분자로 선언
	HashMap<String, Strudent> map = new HashMap<String, Student>();	//생성
	map.put("자바왕", new Student("자바왕", 1,1,100,100,100));	//데이터 저장

	public class HashMap<K,V> extends AbstractMap<K,V> { // 일부 생략
		...
		public V get(Object ket)	{ /* 내용 생략 */ }
		public V put(K key, V value)	{ /* 내용 생략 */ }
		public V remove(Object ket)	{ /* 내용 생략 */ }
		...
	}
-----------------------------------------------------------------------------
ch12-9 제한된 지네릭 클래스
- extends로 대입할 수 있는 타입을 제한
	class FruitBox<T extends Fruit> {	// Fruit의 자손만 타입으로 지정가능
		ArrayList<T> list = new ArrayList<T>();
		...
	}

	FruitBox<Apple> appleBox = new FruitBox<Apple>():	// OK
	FruitBox<Toy> toyBox = new FruitBox<Toy>();	//에러. Toy는 Fruit 의 자손이 아님

- 인터페이스인 경우에도 extends를 사용.
	interface Eatable {}
	class FruitBox<T extends Eatable> { ... }
-----------------------------------------------------------------------------
ch12-10 제한된 지네릭 클래스 (예제)
-----------------------------------------------------------------------------
ch12-11 지네릭스의 제약
- 타입 변수에 대입은 인스턴스 별로 다르게 가능
	Box<Apple> appleBox = new Box<Apple>();	//Ok. Apple객체만 저장가능
	Box<Grape> grapeBox = new Box<Grape>();	//Ok. Grape객체만 저장가능

- static 멤버에 타입 변수 사용 불가
	class Box<T> {
		static T item;
		static int compare(T t1, T t2) { ... }	//에러

- 배열 생성할 때 타입 변수 사용불가. 타입 변수로 배열 선언은 가능
	class Box<T>
		T[] itemArr;	//OK T타입의 배열을 위한 참조 변수
			...
		T[] toArray() {
			T[] tmpArr = new T[itemArr.length];	//에러. 지네릭 배열 생성불가
			...
-----------------------------------------------------------------------------
ch12-12 와일드 카드 <?>
- 하나의 참조 변수로 대입된 타입이 다른 객체를 참조 가능
	ArrayList<? extends Product> list = new ArralyList<Tv>();	//OK
	ArrayList<? extends Product> list = new ArralyList<Audio>();	//OK
	ArrayList<Product>	 list = new ArrayList<Tv>();	//에러. 대입된 타입 불일치

와일드카드는 아래의 3가지처럼 사용할수 있다.
<? extends T>	와일드 카드의 상한 제한. T와 그 자손들만 가능
<? super T>	와일드 카드의 하한 제한. T와 그 조상들만 가능
<?>		제한 없음. 모든 타입이 가능. <? extends Object>와 동일

- 메서드의 매개변수에 와일드 카드를 사용
	static Juice makeJuice(FruitBox<? extends Fruit> box) {
		String tmp = "";
		for(Fruit f : box.getList()) tmp += f + " ";
		retuSystem.out.println(Juicer.makeJuice(new FruitBox<Fruit>()));
		     System.out.println(Juicer.makeJuice(new FruitBox<Apple>(););
-----------------------------------------------------------------------------
ch12-13 와일드 카드 (예제)
-----------------------------------------------------------------------------
ch12-14 지네릭 메서드
- 지네릭 타입이 선언된 메서드(타입 변수는 메서드 내에서만 유효)
	static <T> void sort(List<T> list, Comparator<? super T> c)

- 클래스의 타입 매개변수<T>와 메서드의 타입 매개변수 <T>는 별개
	class FruitBox<T> {
		...
		static<T> void sort(Live<T> list, Comparator<? super T> c) {
		...
		}
	}
-----------------------------------------------------------------------------
ch12-14 지네릭 메서드
- 메서드를 호출할 때마다 타입을 대입해야(대부분 생략 가능)
	FruitBox<Fruit> fruitBox = new FruitBox<Fruit>();
	FruitBox<Apple> appleBox = new FruitBox<Apple>();
		...
	System.out.println(Juicer.<Fruit>makeJuice(fruitBox));
	System.out.println(Juicer.<Apple>makeJuice(appleBox));

	static <T extends Fruit> Juice makeJuice(FruitBox<T> box) {
		String tmp = "";
		for(Fruit f : box.getList()) tmp += f + " ";
		return new Juice(tmp);
	}

- 메서드를 호출할 때 타입을 생략하지 않을 때는 클래스 이름 생략 불가
	System.out.println(<Fruit>makeJuice(fruitBox));	//에러. 클래스 이름 생략불
	System.out.println(this.<Fruit>makeJuice(fruitBox));	// OK.
	System.out.println(Juicer.<Fruit>makeJuice(fruitBox));	// OK.
-----------------------------------------------------------------------------
ch12-15 지네릭 타입의 형변환
- 지네릭 타입과 원시 타입 간의 형변환은 바람직 하지 않다.(경고 발생)
	Box<Object> objBox = null;
	Box box = (Box)objBox;	//OK. 지네릭 타입 → 원시 타입. 경고 발생
	objBox = (Box<Object>)box;	//OK. 원시타입 → 지네릭타입. 경고 발생

	objBox = (Box<Object>)strBox;	//에러. Box<String> → Box<Object>
	strBox = (Box<String>)objBox;	//에러. Box<Object> → Box<String>

- 와일드 카드가 사용된 지네릭 타입으로는 형변환 가능
	Box<Object>	objBox = (Box<Object>)new Box<String>();	//에러. 형변환 불가능
	Box<? extends Object> wBox = (Box<? extends Object>)new Box<String>();	//OK
	Box<? extends Object> wBox = new Box<String>();	//위 문장과 동일

	//매개변수로 FruitBox<Fruit>, FruitBox<Apple>, FruitBox<Grape> 등이 가능
	static Juice makeJuice(FruitBox<? extends Fruit> box) { ... }

	FruitBox<? extends Fruit> box = new FruitBox<Fruit>();	//OK
	FruitBox<? extends Fruit> box = new FruitBox<Apple>();	//OK
-----------------------------------------------------------------------------
ch12-16 지네릭 타입의 제거
- 컴파일러는 지네릭 타입을 제거하고, 필요한 곳에 형변환을 넣는다.
① 지네릭 타입의 경계(bound)를 제거
class Box<T extends Fruit> {
	void add(T t) {
		...
	}
}
에서 아래처럼 바뀐다!
class Box {
	void add(Fruit t) {
		...
	}
}

② 지네릭 타입 제거 후에 타입이 불일치하면, 형변환을 추가
T get(int i) {
	return list.get(i);
}
에서 아래처럼 바뀐다!
Fruit get(int i) {
	return (Fruit)list.get(i);
}

③ 와일드 카드가 포함된 경우, 적절한 타입으로 형변환 추가
static Juice makeJuice(FruitBox<? extends Fruit> box) {
	String tmp = "";
	for(Fruit f : box.getList())
		tmp += f + " ";
	return new Juice(tmp);
}
에서 아래처럼 바뀐다!
static Juice makeJuice(FruitBox<? extends Fruit> box) {
	String tmp = "";
	Iterator it = box.getList().iterator();
	while(it.hasNext()) {
		tmp += (Fruit)it.next() + " ";
	}
	return new Juice(tmp);
}
-----------------------------------------------------------------------------
ch12-17 열거험(enum)
- 관련된 상수들을 같이 묶어 놓은 것. Java는 타입에 안전한 열거형을 제공
class Card {
	static final int CLOVER = 0;
	static final int HEART = 1;
	static final int DIAMOND = 2;
	static final int SPADE = 3;
	
	static final int TWO = 0;
	static final int THREE = 1;
	static final int FOUR = 2;
	
	final int kind;
	final int num;
}

class Card {
	enum kind { CLOVER, HEART, DIAMOND, SPADE }	// 열거형 Kind를 정의
	enum Value { TWO, THREE, FOUR }			// 열거형 Value를 정의

	final Kind kind;	// 타입이 int가 아닌 Kind임에 유의하자
	final Value value;
}
-----------------------------------------------------------------------------
ch12-18 열거형의 정의와 사용
- 열거형을 정의하는 방법
	enum 열거형이름 { 상수명1, 상수명2, ... }
예) enum Direction { EAST, SOUTH, WEST, NORTH }

- 열거형 타입의 변수를 선언하고 사용하는 방법
	class Unit {
		int x, y;	//유닛의 위치
		Direction dir;	//열거형 인스턴스 변수를 선언

		void int() {
			dir = Direction.EAST;	//유닛의 방향을 EAST로 초기화
		}
	}

- 열거형 상수의 비교에 ==와 compareTo() 사용 가능
	if(dir==Direction.EAST) {
		x++;
	} else if(dir > Direction.WEST) {	//에러. 열거형 상수에 비교연산자 사용 불가!!
		...
	} else if (dir.compareTo(Direction.WEST) > 0) {	//complareTo() 는 ㄴ가능
		...
	}
-----------------------------------------------------------------------------
ch12-19 열거형의 조상 - java.lang.Enum
- 모든 열거형은 Enum의 자손이며, 아래의 메서드를 상속받는다.

메서드					설명
Class<E> getDeclaringClass()			열거형의 Class객체를 반환
Srting name()				열거형 상수의 이름을 문자열로 반환
int ordinal()				열거형 상수가 정의된 순서를 반환(0부터 시작)
T valueOf(Class<T> enumType, String name)	지정된 열거형에서 name과 일치하는 열거형 상수를 반환

- valuse(), valueOf()는 컴파일러가 자동으로 추가
	static E[] values()
	static E valueOf(String name)

	Dircetion[] dArr = Direction.values();

	for(Direction d : dArr)	//for(Direction d : Driection.values())
		System.out.printf("%s=%d\n", d.name(), d.ordinal());
-----------------------------------------------------------------------------
ch12-20 열거형 enum (예제)
-----------------------------------------------------------------------------
ch12-21 열거형 멤버 추가하기
- 불연속적인 열거형 상수의 경우, 원하는 값을 괄호()안에 적는다.
	enum Direction { EAST(1), SOUTH(5), WEST(-1), NORTH(10) }

- 괄호()를 사용하려면, 인스턴스 변수와 생성자를 새로 추가해 줘야 한다.
	enum Direction {
		EAST(1), SOUTH(5), WEST(-1), NORTH(10);	//끝에 ";'를 추가해야 한다.

		private final int value;	//정수를 저장할 필드(인스턴스 변수)를 추가
		Direction(int value)	{ this.value = value; }	// 생성자를 추가

		public int getValue()	{ return value; }
	}

- 열거형의 생성자는 묵시적으로 private이므로, 외부에서 객체생성 불가
	Direction d = new Direction(1);	//에러. 열거형의 생성자는 외부에서 호출불가
-----------------------------------------------------------------------------
ch12-22 열거형 멤버 추가하기 (예제)
-----------------------------------------------------------------------------
ch12-23 애너테이션이란?
- 주석처럼 프로그래밍 언어에 영향을 미치지 않으며, 유용한 정보를 제공

예)
@Test	//이 메서드가 테스트 대상임을 테스트 프로그램에게 알린다.
public void method() {
	...
}
-----------------------------------------------------------------------------
ch12-24 표준 애너테이션
- Java에서 제공하는 애너테이션

애너테이션
@Override		컴파일러에게 오버라이딩하는 메서드라는 것을 알린다.
@Deprecated		앞으로 사용하지 않을 것을 권장하는 대상에 붙인다.
@SuppressWarnings	컴파일러의 특정 경고메시지가 나타나지 않게 해준다.
@SafeVarargs		지네릭스 타입의 가변인자에 사용한다.(JDK 1.7)
@FunctionalInterface	함수형 인터페이스라는 것을 알린다.(JDK1.8)
@Native			native메서드에서 참조되는 상수 앞에 붙인다.(JDK1.8)
@Target			애너테이션이 적용가능한 대상을 지정하는데 사용한다.
@Documented		애너테이션 정보가 javadoc으로 작성된 문서에 포함되게 한다.
@Ingerited		애너테이션이 자손 클래스에 상속되도록 한다.
@Retention		애너테이션이 유지되는 범위를 지정하는데 사용한다.
@Repeatable		애너테이션을 반복해서 적용할 수 있게 한다.(JDK1.8)
-----------------------------------------------------------------------------
ch12-25 @Override
- 오버라이딩을 올바르게 했는지 컴파일러가 체크하게 한다.
- 오버라이딩할 때 메서드 이름을 잘못적는 실수를 하는 경우가 많다.

class Parent {
	void parentMethod() { }
}

class Child extends Parent {
	void parentmethod() { }	//오버라이딩하려 했으나 실수로 이름을 잘못 적음
}

- 오버라이딩할 때는 메서드 선언부 앞에 @Override를 붙이자
class Child extends Parent {
	void parentmethod() {}
}
위의 코드에서...

class Child extends Parent {
	@Override
	void parentmethod() {}
}
-----------------------------------------------------------------------------
ch12-26 @Deprecated
- 앞으로 사용하지 않을 것을 권장하는 필드나 메서드에 붙인다.
- @Deprecated의 사용 예, Date클래스의 getDate()
@Deprecated
public int getDate() {
	return normalize().getDayOfMonth();
}

- @Deprecated가 붙은 대상이 사용된 코드를 컴파일하면 waring 경고 발생!!
<그림 ch12-26 Deprecated 참고>
-----------------------------------------------------------------------------
ch12-27 @FynctionalInterface
- 함수형 인터페이스에 붙이면, 컴파일러가 올바르게 작성했는지 체크
- 함수형 인터페이스에는 하나의 추상메서드만 가져야 한다는 제약이 있음
-----------------------------------------------------------------------------
ch12-28 @SuppressWarnings
- 컴파일러의 경고메시지가 나타나지 않게 억제한다.
- 괄호()안에 억제하고자 하는 경고의 종류를 문자열로 지정
@SuppressWarnings("unchecked")	//지네릭스와 관련된 경고를 억제
ArrayList list = new ArrayList();	//지네릭 타입을 지정하지 않았음.
list.add(obj);			//여기서 경고가 발생

- 둘 이상의 경고를 동시에 억제하려면 다음과 같이 한다.
@SuppressWarnings (("deprecation", "unchecked", "varargs"))

- '-Xlint'옵션으로 컴파일하면, 경고메시지를 확인할 수 있다.
<그림 ch12-28 SuppressWarnings 참고>
-----------------------------------------------------------------------------
ch12-29 메타 애너테이션
- 메타 애너테이션은 '애너테이션을 위한 애너테이션'
- 메타 애너테이션은 java.lang.annotaion 패키지에 포함

애너테이션	설명
@Target		애너테이션이 적용가능한 대상을 지정하는데 사용한다.
@Documented	애너테이션 정보가 javadoc으로 작성된 문서에 포함되게 한다.
@Ingerited	애너테이션이 자손 클래스에 상속되도록 한다.
@Retention	애너테이션이 유지되는 범위를 지정하는데 사용한다.
@Repeatable	애너테이션을 반복해서 적용할 수 있게 한다.(JDK1.8)
-----------------------------------------------------------------------------
ch12-30 @Target
- 애너테이션을 정의할 때, 적용대상 지정에 사용
	  클래스,
@Target ( { TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL, VARIABLE} )
@Retrention(RetentionPolicy.SOURCE)
public @interface SuppressWarnings {
	String[] value();
}
-----------------------------------------------------------------------------
ch12-31 @Retention
- 애너테이션이 유지(retention)되는 기간을 지정하는데 사용
- SOURCE와 RUNTIME이 자주 사용됨

SOURCE	소스 파일에만 존재. 클래스파일에는 존재하지 않음.
CLASS	클래스 파일에 존재. 실행시에 사용불가. 기본값
RUNTIME	클래스 파일에 존재. 실행시에 사용가능

- 컴파일러에 의해 사용되는 애너테이션의 유지 정책은 SOURCE이다.
@Target (ElementType.METHOD)
@Retention(RetentionPolicy.SOURCE)
public @interface Overrid {}

- 실행시에 사용 가능한 애너테이션의 정책은 RUNTIME이다.

@Documented
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface FunctionalInterface {}
-----------------------------------------------------------------------------
ch12-32 @Documented, @Inherited
- javadoc으로 작성한 문서에 포함시키려면 @Documented를 붙인다.
@Documented
@Retention(RetentionPlicy,RUNTIME)
@Target(ElementType.TYPE)
public @interface FunctionalInterface { }

- 애너테이션을 자손 클래스에 상속하고자 할 때, @Inherited를 붙인다.
@Inherited		// @SuperAnno가 자손까지 영향 미치게
@interface SuperAnno {}

@SuperAnno
class Parent {}

class Child extends Parent {}	// Child에 애너테이션이 붙은 것으로 인식
-----------------------------------------------------------------------------
ch12-33 @Repeatable
- 반복해서 붙일 수 있는 애너테이션을 정의할 때 사용
@Repeatable(ToDos.class)	//ToDo애너테이션을 여러 번 반복해서 쓸 수 있게 한다.
@interface ToDo {
	Strinjg value();
}

- @Repeatable이 붙은 애너테이션은 반복해서 붙일 수 있다ㅣ.
@ToDo("delete test codes.")
@Todo("Override inherited method")
class MyClass {
	...
}

- @Repeatable인 @ToDo를 하나로 묶을 컨테이너 애너테이션도 정의해야 함
@interface ToDos { //여러 개의 ToDo애너테이션을 담을 컨테이너 애너테이션 ToDos
	ToDo[] value();	//ToDo 애너테이션 배열타입의 요소를 선언. 이름이 반드시 value이어야 함
}
-----------------------------------------------------------------------------
ch12-34 애너테이션 타입 정의하기
- 애너테이션을 직접 만들어 쓸 수 있다.
@interface 애너테이션 이름 {
	타입 요소이름();	//애너테이션의 요소를 선언한다.
		...
}

@interface DateTime {
	String yymmdd(); // 날짜
	String hhmmss(); // 시간
}

- 애너테이션의 메서드는 추상 메서드이며, 애너테이션을 적용할 때 지정(순서X)

@interface TestInfo {
	int count();
	String testedBy();
	String[] testTools();
	TestType testType();	// enum TestType { FIRST, FINAL }
	DateTime testDate();	// 자신이 아닌 다른 애너테이션(@DateTime)을 포함할 수 있다.
}
-----------------------------------------------------------------------------
ch12-35 애너테이션의 요소
- 적용시 값을 지정하지 않으면, 사용될 수 있는 기본값 지정 가능(null제외)
@interface TestInfo {
	int count() default 1;	//기본값을 1로 지정
}

@TestInfo	//@TestInfo(count=1)과 동일
public class NewClass { ... }

- 요소가 하나이고 이름이 value일 때는 요소의 이름 생략가능
@interface TestInfo {
	String value();
}

@TestInfo("passed")	// @TestInfo(value="passed")와 동일
class NewClass { ... }

- 요소의 타입이 배열인 경우, 괄호{}를 사용해야 한다.
@interface TestInfo {		@Test(testTools={"JUnit", "AutoTester:})
	String[] testTools();		@Test(testTools="JUnit"
}				@Test(testTools={})	//값이 없을 때는 괄호{}가 반드시 필수!!
-----------------------------------------------------------------------------
ch12-36 모든 애너테이션의 조상 - java.lang.annotation.Annotation
- Annotation은 모든 애너테이션의 조상이지만 상속은 불가
@interface TestInfo extends annotation { //에러. 허용되지 않은 표현
	int	count();
	String	testedBy();
	...
}

- 사실 Annotation은 인터페이스이다.
package java.lang.annotation;

public interface Annotation {	// Annotation 자신은 인터페이스이다.
	boolean equals(Object obj);
	int hashCode();
	String toString();

	Class<? extends Annotation> annotationtype();	//애너테이션의 타입을 반환
}
-----------------------------------------------------------------------------
ch12-37 마커 애너테이션 - Marker Annotation
- 요소가 하나도 정의되지 않은 애너테이션
@Target(ElementType.METHOD)
@Retention(RetentionPlicy.SOURCH)
public @interface Override {}		// 마커 애너테이션. 정의된 요소가 하나도 없다.

@Target(ElementType.METHOD)
@Retention(RetentionPlicy.SOURCH)
public @interface Test {}		// 마커 애너테이션. 정의된 요소가 하나도 없다.

@Test	//이 메서드가 테스트 대상임을 테스트 프로그램에게 알린다.
public void method() {
	...
}

@Deprecated
public int getDate() {
	return normalize().getDayOfMonth();
}
-----------------------------------------------------------------------------
ch12-38 애너테이션 요소의 규칙
- 애너테이션의 요소를 선언할 때 아래의 규칙을 반드시 지켜야 한다.
 - 요소의 타입은 기본형, String, enum, 애너테이션, Class(설계도 객체)만 허용됨 
 - 괄호()안에 매개변수를 선언할 수 없다.
 - 예외를 선언할 수 없다.
 - 요소를 타입 매개변수로 정의할 수 없다.

- 아래의 코드에서 잘못된 부분은 무엇인지 생각해보자.
@interface AnnoTest {
	int id = 100;
	String major(int i, int j);	// 에러 : int i, int j 매개변수 X
	String minor() throws Exception; // 에러: 예외 선언 X
	ArrayList<T> list();	//에러 : 타입 매개변수 X 
}