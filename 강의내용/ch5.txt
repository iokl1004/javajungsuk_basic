ch5-1 배열이란?
"배열은 같은 타입의 여러 변수를 하나의 묶음으로 다루는 것"
-----------------------------------------------------------------------------
ch5-2 배열의 선언과 생성
 배열의 선언 - 배열을 다루기 위한 참조변수의 선언

    선언 방법	// 선언 예
타입[] 변수이름;	// int[] score; ( Java 스타일 )
타입 변수이름[];	// int score[]; ( C언어 스타일 )

타입[] 변수이름;	// 배열을 선언(배열을 다루기 위한 참조변수 선언)
변수이름 = new 타입[길이];	// 배열을 생성(실제 저장공간을 생성)

int[] score;	// int타입의 배열을 다루기 위한 참조변수 score 선언
score = new int[5];	// int타입의 값 5개를 저장할 수 있는 배열 생성
-----------------------------------------------------------------------------
ch5-3 배열의 인덱스
 배열의 인덱스 - 각 요소에 자동으로 붙는 번호
"인덱스(index)의 범위는 0부터 '배열길이-1'까지."
int[] score = new int[5];	// 길이가 5인 int배열

score[3] = 100;	//배열 score의 4번째 요소에 100을 저장한다.
int value = score[3];	// 배열 score의 4번째 요소의 값을 읽어서 value에 저장
-----------------------------------------------------------------------------
ch5-4 배열의 길이
배열이름.length - 배열의 길이(int형 상수)
int[] arr = new int[5];	// 길이가 5인 int 배열
int tmp = arr.length;	// arr.length의 값은 5이고 tmp에 5가 저장된다.

"배열은 한번 생성하면 그 길이를 바꿀 수 없다."
int[] score = new int[6];

for (int i=0; i < 6; i++)
	System.out.println(score[i]);

int[] score = new int[5];	//배열의 길이를 6에서 5로 변경

for (int i = 0; i < score.length; i++) //조건식을 변경하지 않아도 됨
	System.out.println(score[i]);
-----------------------------------------------------------------------------
ch5-5 배열의 초기화
 배열의 각 요소에 처음으로 값을 저장하는 것
int[] score = new int[5];	// 길이가 5인 int형 배열을 생성한다.
score[0] = 50;	// 각 요소에 직접 값을 저장한다.
score[1] = 60;
score[2] = 70;
score[3] = 80;
score[4] = 90;

int[] score = new int[] { 50, 60, 70, 80, 90};
int[] score = { 50, 60, 70, 80, 90 };	//new int[]를 생략할 수 있음 (대부분이 많이 사용함 99%)

int[] score;
score = { 50, 60, 70, 80, 90};	//에러
score = new int[]{50, 60, 70, 80, 90}; // OK
-----------------------------------------------------------------------------
ch5-6 배열의 출력
int[] iArr = { 100, 95, 80, 70, 60 };

//배열을 가리키는 참조변수 iArr의 값을 출력한다.,
System.out.println(iArr);

ch[] chArr = { 'a', 'b', 'c', 'd'};
System.out.println(chArr);	//abcd가 출력된다. ( 캐릭터 배열이여서 )

for(int i =0; i<iArr.length; i++) {	//배열의 요소를 순서대로 하나씩 출력
	System.out.println(iArr[i]);
}

//배열 iArr의 모든 요소를 출력한다. [100, 95, 80, 70, 60]이 출력된다.
System.out.println(Arrays.toString(iArr));
-----------------------------------------------------------------------------
ch5-7 배열 (예제)
-----------------------------------------------------------------------------
ch5-8 배열의 활용(1) (예제)
-----------------------------------------------------------------------------
ch5-9 배열의 활용(2) (예제)
-----------------------------------------------------------------------------
ch5-10 배열의 활용(3) (예제)
-----------------------------------------------------------------------------
ch5-11 배열의 활용(4) (예제)
-----------------------------------------------------------------------------
ch5-12 String배열의 선언과 생성
 String[] name = new String[3];	//3개의 문자열을 담을 수 있는 배열을 생성한다.
name[0] = "Kim" ;
name[1] = "Park";
name[2] = "Yi";
-----------------------------------------------------------------------------
ch5-13 String배열의 선언과 생성 (예제)
-----------------------------------------------------------------------------
ch5-14 String 클랙스
 1. String클래스는 char[]와 메서드(기능)를 결합한 것
  String클래스 = char[] + 메서드(기능)
 2. String클래스는 내용을 변경할 수 없다.(read only)
-----------------------------------------------------------------------------
ch5-15 String 클래스의 주요 메서드

char charAt(int index) //문자열에서 해당 위치(index)에 있는 문자를 반환한다.
int length()	// 문자열의 길이를 반환한다.
String substring(int from, int to) //문자열에서 해당 범위(from~to)의 문자열을 반환한다.(to는 포함 안됨)
bollean equals(Object obj)	//문자열의 내용이 같은지 확인한다. 같으면 결과는 true, 다르면 false
char[] toCharArray()	//문자열을 문자배열(char[]0로 변환해서 반환한다.

String str = "ABCDE";
char ch = str.charAt(3);	// 문자열 str의 4번째 문자 'D'를 ch에 저장

String str = "012345";
String tmp = str.substring(1,4) //str에서 index범위 1~4의 문자들을 반환
System.out.println(tmp);	// "123"이 출력된다.
-----------------------------------------------------------------------------
ch5-16 커맨드 라인을 통해 입력받기 (예제)
-----------------------------------------------------------------------------
ch5-17 커맨드 라인을 통해 입력받기 (예제)
-----------------------------------------------------------------------------
ch5-18 2차원 배열
 테이블 형태의 데이터를 저장하기 위한 배열
int[][] score = new int[4][3] // 4행 3열의 2차원 배열 score를 생성
-----------------------------------------------------------------------------
ch5-19 2차원 배열의 인덱스
int[][] score = new int[4][3]

열 index(0~열의 길이-1)
행 index(0~행의 길이-1)
[0][0] [0][1] [0][2]
[1][0] [1][1] [1][2]
[2][0] [2][1] [2][2]
[3][0] [3][1] [3][2]
score[0][0] = 100;			//배열 score의 [0][0]에 값 100을 추가
System.out.println(score[0][0]);	//배열 score의 1행 1열의 값을 출력
-----------------------------------------------------------------------------
ch5-20 2차원 배열의 초기화
int[][] arr = new int[][]{ 1, 2, 3 }, {4, 5, 6};
int[][] arr  = { {1, 2, 3}, {4, 5, 6} }; // new int[][]가 생략됨

대부분 밑에 방식대로 작성
int[][] arr = {
		{1, 2, 3},
		{4, 5, 6}
	   };

int[][] score = {
		{100, 100, 100},
		{20, 20, 20},
		{30, 30, 30},
		{40, 40, 40}
	       }; 
-----------------------------------------------------------------------------
ch5-21 2차원 배열 (예제)
-----------------------------------------------------------------------------
ch5-22 2차원 배열 (예제)
-----------------------------------------------------------------------------
ch5-23 2차원 배열 (예제)
-----------------------------------------------------------------------------
ch5-24 Array로 배열 다루기
배열의 비교와 출력 - equals(), toString()

int[] arr = {0,1,2,3,4};
int[][] arr2D = {{11,12}, {21,22}};
System.out.println(Arrays.toString(arr)); // [0, 1, 2, 3, 4]
System.out.println(Arrays.deepToString(arr2d)); // [[11, 12], [21, 22]] 2차원이상일때는 deepToString 사용

String[][] str2D  = new String[][] {{"aaa", "bbb"}, {"AAA," "BBB"}};
String[][] str2D2 = new String[][] {{"aaa", "bbb"}, {"AAA," "BBB"}};
System.out.println(Arrays.equals(str2D, str2D2)); // false
System.out.println(Arrays.deepEquals(str2D, str2D2)); // true

배열의 복사 - copyOf(), copyOfRange()
int[] arr = {0,1,2,3,4};
int[] arr2 = Arrays.copyOf(arr, arr.length);	//arr2=[0,1,2,3,4]
int[] arr3 = Arrays.copyOf(arr, 3);	//arr3=[0,1,2]
int[] arr4 = Arrays.copyOf(arr, 7);	//arr4=[0,1,2,3,4,0,0]
int[] arr5 = Arrays.copyOfRange(arr, 2, 4);	//arr5=[2,3]
int[] arr6 = Arrays.copyOfRange(arr, 0, 7);	//arr6=[0,1,2,3,4,0,0]

배열의 정렬 - sort()
int[] arr = { 3, 2, 0, 1, 4};
Arrays.sort(arr);	// 배열 arr을 정렬한다.
System.out.println(Arrays.toString(arr));	// [0, 1, 2, 3, 4]