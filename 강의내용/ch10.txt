ch10-1 날짜와 시간
- java.util.Date
 날짜와 시간을 다룰 목적으로 만들어진 클래스(JDK1.0)
 Date의 메서드는 거의 deprecated(앞으로 사용하지말라는 뜻) 되었지만, 여전히 쓰이고 있다.

- java.util.Calendar
 Date 클래스를 개선한 새로운 클래스(JDK1.1). 여전히 단점이 존재

- java.time패키지
 Date와 Calendar의 단점을 개선한 새로운 클래스들을 제공(JDK1.8)
-----------------------------------------------------------------------------
ch10-2 Calendar클래스
- 추상 클래스 이므로 getInstance()를 통해 구현된 객체를 얻어야 한다.
	Calendar cal = new Calendar();	//에러!!! 추상 클래스는 인스턴스를 생헐할 수 없다.

	// OK, getInstance()메서드는 Calendar클래스를 구현한 클래스의 인스턴스를 반환한다.
	Calendar cal = Calendar.getInstance();
-----------------------------------------------------------------------------
ch10-3 Calendar클래스 - 예제1
- get()으로 날짜와 시간 필드 가져오기 - int get(int field)
	Calendar cal = Calendar.getInstance();	//현재 날짜와 시간으로 셋팅됨
	int thisYear = cal.get(Calendar.YEAR);	//올해가 몇년인지 알아낸다.
	int lastDayOfMonth = cal.getActualMaximum(Calendar.DATE);	//이 달의 마지막 날

- Calendar에 정의된 필드
필드명			설명
YEAR			년
MONTH			월(0부터 시작)
WEEK_OF_YEAR		1월1일 ~ 지금
WEEK_OF_MONTH		그 달의 몇 번째 주
DATE			일
DAY_OF_MONTH		그 달의 몇 번째일
DAY_OF_YEAR		그 해의 몇 번째일
DAY_OF_WEEK		요일 (1~7) 1 : 일요일
DAY_OF_WEEK_IN_MONTH	그 달의 몇 번째 요일

HOUR			시간(0~11)
HOUR_OF_DAY		시간(0~23)
MINUTE			분
SECOND			초
MILLISECOND		천분의 일초
ZONE_OFFSET		GMT기준 시차(천분의 일초 단위)
AM_PM			오전/오후
-----------------------------------------------------------------------------
ch10-4,5 Calendar클래스 - 예제2, 3
- set()으로 날짜와 시간지정하기
void set(int field, int value)
void set(int year, int month, int date)
void set(int year, int month, int date, int hourOfDay, int minute)
void set(int year, int month, int date, int hourOfDay, int minute, int second)

- 날짜 지정하는 방법. 월(MONTH)이 0부터 시작한다는 점에 주의
Calendar date1 = Calendar.getInstance();
date1.set(2017, , 15);	//2017년 8월 15일(7월아님... 0부터 시작!!)

- 시간 지정하는 방법.
Calendar time1 = Calendar.getInstance();
time1.set(Calendar.HOUR_OF_DAY, 10); //time1을 10시 20분 30초로 설정
time1.set(Calendar.MINUTE, 20);
time1.set(Calendar.SECOND, 30);

-clear()는 Calendar객체의 모든 필드를 초기화
	Calendar dt = Calendar.getInstance();

	//Tue Aug 29 07:13:03 KST 2017
	System.out.println(new Date(dt.getTimeInMillis()));

	dt.clear();	//모든 필드를 초기화
	//Thu Jan 01 00:00:00 KST 1970
	System.out.println(new Date(dt.getTimeInMillis()));

-clear(int field)는 Calendar객체의 특정 필드를 초기화
	Calendar ft = Calendar.getInstance();

	//Tue Aug 29 07:13:03 KST 2017
	System.out.println(new Date(dt.getTimeInMillis()));

	dt.clear(Calendar.SECOND);	//초를 초기화
	dt.clear(Calendar.MINUTE);	//초를 초기화
	dt.clear(Calendar.HOUR_OF_DAY);	//시간을 초기화
	dt.clear(Calendar.HOUR);	//시간을 초기화

	//Tue Aug 29 00:00:00 KST 2017
	System.out.println(new Date(dt.getTimeInMillis()));
-----------------------------------------------------------------------------
ch10-6,7 Calendar클래스 - 예제4, 5
- add()는 특정 필드의 값을 증가 또는 감소(다른 필드에 영향O)
	Calendar date = Calendar.getInstance();
	date.clear();	// 모든 필드를 초기화
	date.set(2020, 7, 31);	//2020년 8월 31일로 설정

	date.add(Calendar.DATE, 1);	//날짜(DATE)에 1을 더한다.
	date.add(Calendar.MONTH, -8);	//월(MONTH)에서 8을 뺀다.

- roll()은 특정필드의 값을 증가 또는 감소(다른 필드에 영향X)
	date.set(2020, 7, 31);	//2020년 8월 31일로 설정

	//add()와 달리 roll()은 다른 필드에 영향을 미치지 않는다.
	date.roll(Calendar.DATE, 1);	// 날짜(DATE)에 1을 더한다.
	date.roll(Calendar.MONTH, -8);	// 월(MONTH)에서 8을 뺀다.
-----------------------------------------------------------------------------
ch10-8 Date와 Calendar간의 변환
- Date의 메서드는 대부분 deprecated(사용하지 않을것을 권장) 되었지만 여전히 사용

1. Calendar를 Date로 변환
	Calendar cal = Calendar.getInstance();
		...
	Date d = new Date(cal.getTimeInMillis());	//Date (long date)
2. Date를 Calendar로 변환
	Date d = new Date();
		...
	Calendar cal = Calendar.getInstance();
	cal.setTime(d)
-----------------------------------------------------------------------------
ch10-9 형식화 클래스
- java.text패키지의 DecimalFormat, SimpleDateFormat
※ Decimal : 10진수 숫자
※ Date : 날짜 형식화

- 숫자와 날짜를 원하는 형식으로 쉽게 출력 가능(숫자, 날짜 -> 형식 문자열)
	double number = 1234567.89;
	DecimalFormat df = new DecimalFormat("#.#E0");
	String result = df.format(number);	//result = "1.2E6"

- 형식 문자열에서 숫자와 날짜를 뽑아내는 기능(형식 문자열 -> 숫자, 날짜)
	DecimalFormat df = DecimalFormat("#,###.##");
	Number num = df.parse("1,234,567,89");
	double d = num.doubleValue();	//1234567.89
-----------------------------------------------------------------------------
ch10-10 DecimalForamt
- 숫자를 형식화 할 때 사용(숫자 -> 형식 문자열)
	double number = 1234567.89;
	DecimalFormat df = new DecimalFormat("#.#E0");
	String result = df.format(number);	//result = "1.2E6"

- 특정 형식의 문자열을 숫자로 변환할 때도 사용(형식 문자열 -> 숫자)
	DecimalFormat df = new DecimalFormat("#,###.##");
	Number num = df.parse("1,234,567,89");
	double d = num.doubleValue();	//1234567.89
[참고] Integer.parseInt()는 콤마(,)가 포함된 문자열을 숫자로 변환 못함
-----------------------------------------------------------------------------
ch10-11~12 DecimalForamt (예제)
-----------------------------------------------------------------------------
ch10-13 SimpleDateFormat(1/2)
- 날짜와 시간을 다양한 형식으로 출력할 수 있게 해준다.
	Date today = new Date();
	SimpleDateFormat df = new simpleDateFormat("yyyy-MM-dd");

	//오늘 날짜를 yyyy-MM-dd형태로 변환하여 반환한다.
	String result = df.format(today);
-----------------------------------------------------------------------------
ch10-13 SimpleDateFormat(2/2)	
- 특정 형식으로 되어 있는 문자열에서 날짜와 시간을 뽑아낼 수도 있다.
	DateFormat df = new SimpleDateFormat("yyyy년 MM월 dd일");
	DateFormat df2 = new SimpleDateFormat("yyyy/MM/dd");
	Date d = df.parse("2015년 11월 23일");	//문자열을 Date로 변환
	String result = df2.format(d);