ch9-1 Object클래스
- 모든 클래스의 최고 조상. 오직 11개의 메서드만을 가지고 있다.
- notify(), wait() 등은 쓰레드와 관련된 메서드이다.

protected Object clone()	객체 자신의 복사본을 반환한다.
public boolean equals(Object obj)	객체 자신과 객체 obj가 같은 객체인지 알려준다.(같으면 true)
protected void finalize()	객체가 소멸될 때 가비지 컬렉터에 의해 자동적으로 호출된다. 이때 수행되어야하는 코드가 있을 때 오버라이딩 한다. (거의 사용안함)
public Class getClass()	객체 자신의 클래스 정보를 담고 잇는 Class 인스턴스를 반환한다.
public int hashCode()	객체 자신의 해시코드를 반환한다.
public String toString()	객체 자신의 정보를 문자열로 반환한다.
public void notify()		객체 자신을 사용하려고 기다리는 쓰레드를 하나만 깨운다.
public void notifyAll()	객체 자신을 사용하려고 기다리는 모든 쓰레드를 깨운다.
public void wait() / public void wait(long timeout) / public void wait(long timeout, int nanos)	다른 쓰레드가 notilfy()나 notilyAll()을 호출할 때까지 현재 쓰레드를 무한히 또는 지정된 시간(timeout, nanos)동안 기다리게한다. (timeout은 천 분의 1초, nanos는 10의 9제곱 분의 1초)
-----------------------------------------------------------------------------
ch9-2 equals(Object obj)
- 객체 자신(this)과 주어진 객체(obj)를 비교한다. 같으면 true, 다르면 false.
- Object클래스의 equals()는 객체의 주소를 비교(참조변수 값 비교)

public booelan equals(Object obj) {
	return (this==obj);
}
-----------------------------------------------------------------------------
ch9-3 equals(Object obj)의 오버라이딩
- 인스턴스 변수(iv)의 값을 비교하도록 equals()를 오버라이딩해야 한다.

class Person {
	long id;

	public boolean equals(Object obj) {
		if(obj instanceof Person)
			return id ==((Person)obj).id;	//boj가 Object타입이므로 id값을 참조하기 위해서는 Person타입으로 형변환이 필요하다.
		else
			return false; // 타입이 Person이 아니면 값을 비교할 필요도 없다.
	}

	Person(long id) {
		this.id = id;
	}
}
-----------------------------------------------------------------------------
ch9-4 hashCode()
- 객체의 해시코드(hash code)를 반환하는 메서드
※ 해시코드란? 정수값. 해싱 알고리즘에서 사용함. / 객체의 지문 이라고도함
- Object클래스의 hashCode()는 객체의 주소를 int로 변환해서 반환

public class Object {
	...
	public native int hashCode();	// 네이티브 메서드 : OS의 메서드 ( C언어 ), 내용이 없음.

- equals()를 오버라이딩하면, hashCode()도 오버라이딩해야 한다.
  equals()의 결과가 true인 두 객체의 해시코드는 같아야 하기 때문
	String str1 = new String("abc");
	String str2 = new String("abc");
	System.out.println(str1.equals(str2));	//true
	System.out.println(str1.hashCode());	//96354
	System.out.println(str2.hashCode());	//96354
- System.identityHashCode(Object obj)는 Object클래스의 hashCode()와 동일
	System.out.println(System.identityHashCode(str1)); // 3526198
	System.out.println(System.identityHashCode(str2)); // 7699183
-----------------------------------------------------------------------------
ch9-5~6 toString(), toString()의 오버라이딩
- toString() : 객체를 문자열(String)으로 변환하기 위한 메서드
	public String toString() {	//Object클래스의 toString()
		return getClass().getName+"@"+Integer.toHexString(hashCode());
	}
getClass() : 설계도 객체
getName() : 클래스 이름
@ : at위치
Integer.toHexString : 16진수
hashCode() : 객체주소
-----------------------------------------------------------------------------
ch9-7 String클래스	( 문자열을 다루기 위한 클래스. )
- String클래스 = 데이터(char[]) + 메서드(문자열 관련)

public final class String implements java.io.Serializable, Comparable {
	private char[] value;
	.	...
- 내용을 변경할 수 없는 불변(immutable) 클래스
String a = "a";
String b = "b";
a = a + b; // "ab"
- 덧셈 연산자(+)를 이용한 문자열 결합은 성능이 떨어짐.
  문자열의 결합이나 변경이 잦다면, 내용을 변경가능한 StringBuffer를 사용
-----------------------------------------------------------------------------
ch9-8 문자열의 비교
- String str = "abc";와 String str =new String("abc");의 비교
	String str1 = "abc"; // 문자열 리터럴 "abc"의 주소가 str1에 저장됨
	String str2 = "abc"; // 문자열 리터럴 "abc"의 주소가 str2에 저장됨
	String str3 = new String("abc"); // 새로운 String 인스턴스를 생성
	String str4 = new String("abc"); // 새로운 String 인스턴스를 생성

str1 == str2 // true
str3 == str4 // false
str1.equals(str2) // true
str3.equals(str4) // true
-----------------------------------------------------------------------------
ch9-9 문자열 리터럴
- 문자열 리터럴은 프로그램 실행시 자동으로 생성된다.(constant pool에 저장)

class Ex9_7 {
	public static void main(String args[]) {
		String s1 = "AAA";
		String s2 = "AAA";
		String s3 = "AAA";
		String s4 = "BBB";
	}
}

- 같은 내용의 문자열 리터럴은 하나만 만들어진다.
-----------------------------------------------------------------------------
ch9-10 빈 문자열("", empty string)
- 내용이 없는 문자열. 크기가 0인 char형 배열을 저장하는 무자열
	String str = "";	//str을 빈 문자열로 초기화

- 크기가 0인 배열을 생성하는 것은 어느 타입이나 가능
	char[] chArr = new char[0];	// 길이가 0인 char배열
	int[] iArr = {};	// 길이가 0인 int배열

-문자(char)와 문자열(String)의 초기화
String s = "";	//빈 문자열로 초기화
char c = ' ';	//공백으로 초기화

String str1 = ""; // 잘된 예
String str4 = new String(""); // 안좋은 예, new 연산자가 있으면 내용이 같건 다르건 객체를 3개를 만든다.
-----------------------------------------------------------------------------
ch9-11 String클래스의 생성자와 메서드(1/5)

String(String s) : 주어진 문자열(s)을 갖는 String인스턴스를 생성한다.
예제) String s = new String("Hello");
결과) s = "Hello"

String(char[] value) : 주어진 문자열(value)을 갖는 String인스턴스를 생성한다.
예제) char[] c = {'H','e','l','l','o'}'
        String s = new String(c);
결과) s = "Hello"

String(StringBuffer buf) : StringBuffer인스턴스가 갖고 있는 문자열과 같은 내용의 String인스턴스를 생성한다.
예제) StringBuffer sb = new StringBuffer("Hello");
        String s = new String(sb);
결과) s = "Hello"

char charAt(int index) : 지정된 위치(index)에 있는 문자를 알려준다. (index는 0부터 시작)
예제) String s = "Hello";
       String n = "0123456";
       char c = s.charAt(1);
       char c2 = n.charAt(1);
결과) c = 'e'
       c2 = '1';

int compareTo(String str) : 문자열(str)과 사전순서로 비교한다. 같으면 0을, 사전순으로 이전이면 음수를, 이후면 양수를 반환한다. / 정렬할때 사용된다.
예제) int i = "aaa".compareTo("aaa");
       int i2 = "aaa".compareTo("bbb");
       int i3 = "bbb".compareTo("aaa");
결과) i = 0;
        i2 = -1;
        i3 = 1;
-----------------------------------------------------------------------------
ch9-11 String클래스의 생성자와 메서드(2/5)
String concat(String str) : 문자열(str)을 뒤에 덧붙인다.
예제)
String s= "Hello";
String s2 = s.concat(" World");
결과)
s2 = "Hello World"

blooean contains(CharSequence s) : 지정된 문자열(s)이 포함되었는지 검사한다.
예제)
String s = "abcdefg";
boolean b = s.contains("bc");
결과)
true

blooean endWith(String suffix) : 지정된 문자열(suffix)로 끝나는지 검사
예제)
String file = "Hello.txt";
booean b = file.endWith("txt");
결과)
true

boolean equals(Object obj) : 매개변수로 받은 문자열(obj)과 String 스의 문자열을 비교한다. obj가 String 이거나 문자열이 다르면 false를 반환한다.
예제)
String s = "Hello";
boolean b = s.equals("Hello");
boolean b2 = sq.equals("hello");
결과)
b = true
b2= false;

boolean equalsIgnoreCase(String str) : 문자열과 String 인스턴스의 문자열을 대소문자 구분없이 비교한다.
예제)
String s = "Hello";
boolean b = s.equalsIgnoreCase("HELLO");
boolean b2 = s.equalsIgnoreCase("hello");
결과)
b = true
b2 = true

int indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다. 못 찾으면 -1을 반환한다. (index는 0부터 시작)
예제)
String s = "Hello";
int idx1 = s.indexOf('o');
int idx2 = s.indexOf('k');
결과)
idx1 = 4
idx2 = -1
-----------------------------------------------------------------------------
ch9-11 String클래스의 생성자와 메서드(3/5)
int indexOf(int ch, int pos) : 주어진 문자(ch)가 문자열에 존재하는지 지정된 위치(pos)부터 확인하여 위치(index) 를 알려준다. 못 찾으면 -1을 반환한다. (index는 0부터 시작)
예제)
String s = "Hello";
int idx1 = s.indexOf('e', 0);
int idx2 = s.indexOf('e', 2);
결과)
idx1 = 1
idx2 = -1

int indexOf(String str) : 주어진 문자열이 존재하는지 확인하여 그 위치(index)를 알려준다. 없으면 -1 을 반환한다. (index는 0부터 시작)
예제)
String s = "ABCDEFG";
int idx = s.indexOf("CD");
결과)
idx = 2

int lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
예제)
String s = "java.lang.Object";
int idx1 = s.lastIndexOf('.');
int idx2 = s.indexOf('.');
결과)
idx1 = 9
idx2 = 4

int lastIndexOf(String str) : 지정된 문자열을 인스턴스의 문자열 끝에서 부터 찾아서 위치(index)를 알려준다. 못찾으면 -1을 반환한다.
예제)
String s = "java.lang.java";
int idx1 = s.lastIndexOf("java");
int idx2 = s.indexOf("java");
결과)
idx1 = 10
idx2 = 0

int length() : 문자열의 길이를 알려준다.
예제)
String s = "Hello";
int length = s.length();
결과)
length = 5
-----------------------------------------------------------------------------
ch9-11 String클래스의 생성자와 메서드(4/5)
String[] split(String regex) : 문자열을 지정된 불리자(regex)로 나누어 문자열 배열에 담아 반환한다.
예제)
String animals = "dog, cat, bear";
String[] arr = animals.split(",");
결과)
arr[0] = "dog"
arr[1] = "cat"
arr[2] = "bear"

String[] split(String regex, int limit) : 문자열을 지정된 분리자(regex)로 나누어 문자열배열에 담아 반환한다. 단, 문자열 전체를 지정된 수(limit)로 자른다.
예제)
String animals = "dog, cat, bear";
String[] arr = animals.split(",", 2);
결과)
arr[0] = "dog"
arr[1] = "cat, "bear"

boolean startsWith(String prefix) : 주어진 문자열(prefix)로 시작하는지 검사한다.
예제)
String s = "java.lang.Object";
boolean b = s.startWith("java");
boolean b2 = s.startWith("lang");
결과)
b = true
b2 = false

String substring(int begin) / String substring(int begin, int end) : 주어진 시작위치(begin)부터 끝 위치(end)범위에 포함된 문자열을 얻는다. 이 때, 시작위치의 문자는 범위에 포함되지만, 끝 위치의 문자는 포함되지 않는다. (begin <= x < end)
예제)
String s = "java.lang.Object";
String c = s.substring(10);
String p = s.substring(5,9);
결과)
c = "Object"
p = "lang"
-----------------------------------------------------------------------------
ch9-11 String클래스의 생성자와 메서드(5/5)

String toLowerCase() : String 인스턴스에 저장되어 있는 모든 문자열을 소문자로 변환하여 반환한다.
예제)
String s = "Hello";
String s1 = s.toLowerCase();
결과)
s1 = "hello"

String toUpperCase() : String 인스턴스에 저장되어 있는 모든 문자열을 대문자로 변환하여 반환한다.
예제)
String s = "Hello";
String s1 = s.toUpperCase();
결과)
s1 = "HEELO"

String trim() : 문자열의 왼쪽끝과 오른쪽 끝에 있는 공백을 없앤 결과를 반환한다. 이 때 문자열 중간에 잇는 공백은 제거되지 않는다.
예제)
String s = "     Hello World    ";
String s1 = s.trim();
결과)
s1="Hello World";

static String valueOf(boolean b) : 지정된 값을 문자열로 변환하여 반환한다. 참조변수의 경우, toString()을 호출한 결과를 반환한다.
static String valueOf(char c)
static String valueOf(int i)
static String valueOf(long l)
static String valueOf(float f)
static String valueOf(double d)
static String valueOf(Object o)
예제)
String b = String.valueOf(true);
String c = String.valueOf('a');
String i = String.valueOf(100);
String l = String.valueOf(100:);
String f = String.valueOf(10f);
String d = String.valueOf(10.0);
java.util.Date dd = new.java.util.Date();
String date = String.valueOf(dd);
결과)
b = "true"
c = "a"
i = "100"
l = "100"
f = "10.0"
d = "10.0"
date = "Wed Jan 27 21:26:29 KST 2016"
-----------------------------------------------------------------------------
ch9-12 join()과 StringJoiner
- join()은 여러 문자열 사이에 구분자를 넣어서 결합한다.
	String animals = "dog.cat.bear";
	String[] arr = animals.split(",");	//문자열을 ','를 구분자로 나눠서 배열에 저장
	String str = String.join("-", arr);	//배열의 문자열을 '-'로 구분해서 결합
	System.out.println(str);		//dog-cat-bear
-----------------------------------------------------------------------------
ch9-13 문자열과 기본형 간의 변환
- 숫자를 문자열로 바꾸는 방법
	int i = 100;
	String str1 = i + "";			//100을 "100"으로 변환하는 방법 1
	String str2 = String.valueOf(i);	//100을 "100"으로 변환하는 방법 2

- 문자열을 숫자로 바꾸는 방법
	int i = Integer.parseInt("100");	//"100"을 100으로 변환하는 방법1
	int i2 = Integer.valueOf("100");	//"100"을 100으로 변환하는 방법2
	Integer i2 = Integer.valueOf("100");	// 원래는 반환 타입이 Interger
-----------------------------------------------------------------------------
ch9-14 문자열과 기본형 간의 변환 (예제)
-----------------------------------------------------------------------------
ch9-15 StringBuffer클래스
- String처럼 문자형 배열(char[])을 내부적으로 가지고 있다.
	public final class StringBuffer implements java.io.Serializable {
		private char[] value;
		...
	}
- 그러나, String과 달리 내용을 변경할 수 있다.(mutable)
	StringBuffer sb = new StringBuffer("abc");
	sb.append("123");
-----------------------------------------------------------------------------
ch9-16 StringBuffer의 생성자
- 배열은 길이 변경불가. 공간이 부족하면 새로운 배열 생성해야함
- StringBuffer는 저장할 문자열의 길이를 고려해서 적절한 크기로 생성해야함
	public StringBuffer(int length) {
		value = new char[length];
		shared = false;
	}

	public StringBuffer() {
		this(16); 			//버퍼의 크기를 지정하지 않으면 버퍼의 크기는 16이 된다.
	}

	public StringBuffer(String str) {
		this(str.length() + 16);	// 지정한 문자열의 길이보다 16이 더 크게 버퍼를 생성한다.
		append(str);
	}
-----------------------------------------------------------------------------
ch9-17 StringBuffer의 변경
- StringBuffer는 String과 달리 내용 변경이 가능하다.
StringBuffer sb = new StringBuffer("abc");
sb.append("123");	//sb의 내용 뒤에 "123"을 추가한다.

- append()는 지정된 내용을 StringBuffer에 추가 후, StringBuffer의 참조를 반환
StringBuffer sb2 = sb.append("ZZ");	//sb의 내용뒤에 "ZZ"를 추가한다.
System.out.println(sb);	//abc123ZZ
System.out.println(sb2);	//abc123ZZ

StringBuffer sb = new StringBuffer("abc");
ab.append("123");
ab.append("ZZ");
위에 코드를 간결하게 하자면
StringBuffer sb = new StringBuffer("abc");
ab.append("123").append("ZZ");
sb
-----------------------------------------------------------------------------
ch9-18 StringBuffer의 비교
- StringBuffer는 equals()가 오버라이딩되어있지 않다. (주소비교)

	StringBuffer sb = new StringBuffer("abc");
	StringBuffer sb2 = new StringBuffer("abc");

	System.out.println(sb==sb2); // false
	System.out.println(sb.equals(sb2)); // false

- StringBuffer을 String으로 변환 후에 equals()로 비교해야 한다.

	String s = sb.toString();	//sb를 String으로 변환
	String s2 = sb2.toString();

	System.out.println(s.equals(s2));	//true
-----------------------------------------------------------------------------
ch9-19 StringBuffer의 생성자와 메서드(1/4)
StringBuffer() : 16문자를 담을 수 있는 버퍼를 가진 StringBuffer 인스턴스를 생성한다.
예제)
StringBuffer sb = new StringBuffer();
결과)
sb = ""

StringBuffer (int length) : 지정된 개수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성한다
예제)
StringBuffer sb = new StringBuffer(10);
결과)
sb = ""

StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 String Buffer 인스턴스를 생성한다.
예제)
StringBuffer sb = new StringBuffer("Hi");
결과)
sb = "Hi"

StringBuffer append(boolean b) : 매개변수로 입련된 값을 문자열로 변환하여 StringBuffer의 인스턴스가 저장하고 잇는 문자열의 뒤에 덧붙인다.
StringBuffer append(char c)
StringBuffer append(char[] str)
StringBuffer append(double d)
StringBuffer append(float f)
StringBuffer append(int i)
StringBuffer append(long l)
StringBuffer append(Object obj)
StringBuffer append(String str)
예제)
StringBuffer sb = new StringBuffer("abc");
StringBuffer sb2 = sb.append(true);
ab.append('d').append(10.0+);

StringBuffer sb3 = sb.append("ABC").append(123);
결과)
sb = "adctrue10.10ABC123"
sb2 = "adctrue10.10ABC123"
sb3 = "adctrue10.10ABC123"
-----------------------------------------------------------------------------
ch9-19 StringBuffer의 생성자와 메서드(2/4)
int capacity() : StringBuffer인스턴스의 버퍼크기를 알려준다.
length()는 버퍼에 담긴 문자열의 길이를 알려준다.
예제)
StringBuffer sb = new StringBuffer(100);
sb.append("adcd");
int bufferSize = sb.capacity();
int stringSize = sb.length();
결과)
bufferSize = 100
stringSize = 4(sb에 담긴 문자열이 "abcd"이므로)

char charAt(int index) : 지정된 위치(index)에 있는 문자를 반환한다.
StringBuffer sb = new StringBuffer("abc");
char c = sb.charAt(2);
예제)
StringBuffer sb = new StringBuffer("abc");
char c = sb.charAt(2);
결과)
c = 'c'

StringBuffer delete(int start, int end) : 시작위치(start)부터 끝 위치(end) 사이에 있는 문자를 제거한다. 단, 끝 위치에 문자는 제외
예제)
StringBuffer sb = new StringBuffer("0123456");
StringBuffer sb2 = ab.delete(3,6);
결과)
sb = "0126"
sb2 = "0126"

StringBuffer deleteCharAt(int index) : 지정된 위치(index)의 문자를 제거한다.
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.deleteCharAt(3);
결과)
sb = "012456"
-----------------------------------------------------------------------------
ch9-19 StringBuffer의 생성자와 메서드(3/4)
StringBuffer insert(int pos, boolean b) : 두번째 매개변수로 받은 값을 문자열로 변환하여 지정된 위치(pos)에 추가한다. pos는 0부터 시작
StringBuffer insert(int pos, char c)
StringBuffer insert(int pos, char[] str)
StringBuffer insert(int pos, double d)
StringBuffer insert(int pos, float f)
StringBuffer insert(int pos, int )
StringBuffer insert(int pos, long l)
StringBuffer insert(int pos, Object obj)
StringBuffer insert(int pos, String str)
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.insert(4, '.');
결과)
sb = "0123.456";

int length() : StringBuffer인스턴스에 저장되어있는 문자열의 길이를 반환한다.
예제)
StringBuffer sb = new StringBuffer("0123456");
int length = sb.length();
결과)
length = 7

StringBuffer replace(int start, int end, String str) : 지정된 범위(strart~end)의 문자들을 주어진 문자열로 바꾼다. end위치의 문자는 범위에 포함 되지 않음. (start <= x < end )
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.replace(3, 6, "AB");
결과)
sb = "012AB6"

StringBuffer reverse() : StringBuffer reverse() : StringBuffer인스턴스에 저장되어 잇는 문자열의 순서를 거꾸로 나열한다.
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.reverse();
결과)
sb = "6543210"
-----------------------------------------------------------------------------
ch9-19 StringBuffer의 생성자와 메서드(4/4)
void setCharAt(int index, char ch) : 지정된 위치의 문자를 주어진 문자(ch)로 바꾼다.
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.setChartAt(5, 'o');
결과)
sb = "01234o6"

void setLength(int newLength) : 지정된 길이로 문자열의 길이를 변경한다. 길이를 늘리는 경우에 나머지 빈 공간을 널문자 '\u0000'로 채운다.
예제)
StringBuffer sb = new StringBuffer("0123456");
sb.setLength(5);

StringBuffer sb2 = new StringBuffer("0123456");
sb2.setLength(10);
String str = sb2.toString().trim();
결과)
sb = "01234"
sb2 = "0123456      "
str = "0123456"

String toString() : StringBuffer인스턴스의 문자열을 sTring으로 반환
예제)
StringBuffer sb = new StringBuffer("0123456");
String str = sb.toString();
결과)
str = "0123456"

String subString(int start) : 지정된 범위 내의 문자열을 String으로 뽑아서 반환한다. 시작위치(start)만 지정하면 시작위치부터 문자열 끝까지 뽑아서 반환한다.
String subString(int start, int end)
예제)
StringBuffer sb = new StringBuffer("0123456");
String str = sb.substring(3);
String str2 = sb.substring(3, 5);
결과)
str = "3456"
str2 = "34"
-----------------------------------------------------------------------------
ch9-20 StringBuffer의 생성자와 메서드 (예제)
-----------------------------------------------------------------------------
ch9-21 StringBuilder
- StringBuffer는 동기화되어 있다. 멀티 쓰레드에 안전(thread-safe)
- 멀티 쓰레드 프로그램이 아닌 경우, 동기화는 불필요한 성능저하
   이럴 땐 String Buffer대신 StringBuilder를 사용하면 성능 향상
- 대부분 StringBuffer써도 문제는 없지만 이런것이 있다 정도만 알아두면됨

StringBuffer sb;
sb = new StringBuffer();
sb.append("abc");

StringBuilder sb;
sb = new StringBuilder();
sb.append("abc");

위의 코드를 보면 Buffer에서 Builder로 바꾼거 말고는 차이점이 없다!
지금까지 작성해온 프로그램은 전부 싱글 쓰레드로 작성된 것이고, 멀티 쓰레드로 프로그램을 작성하는 방법은 13장 쓰레드에서 배우게 된다.
-----------------------------------------------------------------------------
ch9-22 Math클래스
- 수학관련 static메서드의 집합
	public static final double E = 2.71828.....	// 자연로그의 밑
	public static final double PI = 3.1459265...	// 원주율
- round()로 원하는 소수점 아래 세번째 자리에서 반올림하기
 1. 원래 값에 100을 곱한다.
	90.7552 * 100 -> 9075.52
 2. 위의 결과에 Math.round()를 사용한다.
	Math.round(9075.52) -> 9076
 3. 위의 결과를 다시 100.0으로 나눈다.
	9076 / 100.0 -> 90.76
	9076 / 100 -> 90
-----------------------------------------------------------------------------
ch9-23 Math클래스의 메서드(1/2)
static double abs(bouble a) : 주어진 값의 절대값을 반환한다.
static float abs(float f)
static int abs(int f)
static long abs(long f)
예제)
int i = Math.abs(-10);
double d= Math.abs(-10.0);
결과)
i = 10
d = 10.0

static double ceil(double a) : 주어진 값을 올림하여 반환한다.
예제)
double d = Math.ceil(10.1);
double d2 = Math.ceil(-10.1);
double d3 = Math.ceil(10.000015;
결과)
d = 11.0
d2 = -10.0
d3 = 11.0

static double floor(double a) : 주어진 값을 버림하여 반환한다.
예제)
double d = Math.floor(10.8);
double d2 = Math.floor(-10.8);
결과)
d = 10.0
d2 = -11.0

static double max(double a, bouble b) : 주어진 두 값을 비교하여 큰 쪽을 반환한다.
static float max(float a, float b)
static int max(int a, int b)
static long max(long a, long b)
예제)
double d = Math.max(9.5, 9.50001),
int i = Math.max(0, -1)
결과)
d = 9.50001
i =0
-----------------------------------------------------------------------------
ch9-23 Math클래스의 메서드(2/2)
static double min(double a, bouble b) : 주어진 두 값을 비교하여 작은 쪽을 반환한다.
static float min(float a, float b)
static int min(int a, int b)
static long min(long a, long b)
예제)
double d = Math.min(9.5, 9.50001);
int i = Math.min(0, -1);
결과)
d = 9.5
i = -1

static double random() : 0.0~1.0범위의 임의의 double값을 반환한다. (1.0은 범위에 포함되지 않는다.)
예제)
double d = Math.random();
int i = (int)(Math.random()*10)+1
결과)
0.0<=d<1.0
1<=i<11

static double rint(double a) : 주어진 double값과 가장 가까운 정수값을 double형으로 반환한다. 단, 두 정수의 정가운데 있는 값(1.5, 2.5, 3.5 등)은 짝수를 반환
예제)
double d = Math.rint(1.2);
double d2 = Math.rint(2.6);
double d3 = Math.rint(3.5);
double d4 = Math.rint(4.5);
결과)
d = 1.0
d2 = 3.0
d3 = 4.0
d4 = 4.0

static long round(double a) : 소수점 첫째자리에서 반올림한 정수값(long)을 반환한다. 두 정수의 정가운데 있는 값은 항상 큰 정수를 반환. (rint()의 결과와 비교)
static long round(float a)
예제)
long l = Math.round(1.2);
long l2 = Math.round(2.6);
long l3 = Math.round(3.5);
long l4 = Math.round(4.5);
double d = 90.7552;
double d2 = Math.round(d*100)/100.0;
결과)
l = 1
l2 = 3
l3 = 4
l4 = 5
d = 90.7552
d2 = 90.76
-----------------------------------------------------------------------------
ch9-24 Math클래스 (예제)
-----------------------------------------------------------------------------
ch9-25 래퍼(wrapper) 클래스
- 8개의 기본형을 객체로 다뤄야할 때 사용하는 클래스.
	public final class Integer extends Number implements Comparable {
		...
		private int value;
		...
	}
-----------------------------------------------------------------------------
ch9-26 래퍼(wrapper) 클래스 - 예제
class Ex9_14 {
	public static void main(String[] args) {
		Integer i = new Integer(100);
		Integer i2 = new Integer(100);

		System.out.println("i==i2 ? " + (i==i2));
		System.out.println("i.equals(i2) ? " + i.equals(i2));
		System.out.println("i.compareTo(i2)= ? " + i.compareTo(i2));
		System.out.println("i.toString()= ? " + i.toString());

		System.out.println("MAX_VALUE=" + Integer.MAX_VALUE);
		System.out.println("MIN_VALUE=" + Integer.MIN_VALUE);
		System.out.println("SIZE=" + Integer.SIZE);
		System.out.println("BYTES=" + Integer.BYTES);
		System.out.println("TYPE=" + Integer.TYPE);
	}
}
-----------------------------------------------------------------------------
ch9-27 Number클래스
- 모든 숫자 래퍼 클래스의 조상

	public abstract class Number implements java.io.Serializable {
		public abstract int	intValue();
		public abstract long longValue();
		public abstract float floatValue();
		public abstract double doubleValue();

		public byte byteVale() {
			return (byte)intValue();
		}

		public short shortValue() {
			return (short)intValue();
		}
	}
-----------------------------------------------------------------------------
ch9-28 문자열을 숫자로 변환하기
- 문자열을 숫자로 변환하는 다양한 방법
	int i = new Integer("100).intValue();	//floatValue, longValue(),...
	int i2 = Integer.parseInt("100");	//주로 이 방법을 많이 사용.
	Integer i3 = Integer.valueOf("100");

문자열 -> 기본형
byte b = Byte.parseByte("100");
short s = Short.parseShort("100");
int i = Integer.parseInt("100");
long l = Long.parseLong("100");
float f = Float.parseFloat("100");
double d = Double.parseDouble("100");

문자열 -> 래퍼 클래스
byte b = Byte.valueOf("100");
short s = Short.valueOf("100");
int i = Integer.valueOf("100");
long l = Long.valueOf("100");
float f = Float.valueOf("100");
double d = Double.valueOf("100");

- n진법의 문자열을 숫자로 변환하는 방법
	int i4 = Integer.parseInt("100",2); // 100(2) -> 4
	int i5 = Integer.parseInt("100",8); // 100(8) -> 64
	int i6 = Integer.parseInt("100",16); // 100(16) -> 256
	int i7 = Integer.parseInt("FF",16); // FF(16) -> 255
//	int i8 = Integer.parseInt("FF"); // NumberFormatException 발생
-----------------------------------------------------------------------------
ch9-29 문자열을 숫자로 변환하기 (예제)
public class RoundTest2 {

	public static void main(String[] args) {
//		int i = Integer.parseInt("100");
		System.out.println("i="+Integer.parseInt("100"));
		System.out.println("i="+Integer.parseInt("100",10));	//위와 동일
		System.out.println("i="+Integer.parseInt("100",2));		//2진수
		System.out.println("i="+Integer.parseInt("FF",16));		//2진수
	}

}
-----------------------------------------------------------------------------
ch9-30 오토박싱 & 언방식
기본형 int를 래퍼(wrapper) 클래스인 Integer로 자동으로 바꿔주는것을 오토박싱이라고 함
반대로 래퍼(wrapper) 클래스 Integer를 기본형 int로 자동으로 바꿔주는것을 언박싱이라고 함

- JDK1.5 이전에는 기본형과 참조형간의 연상이 불가능
예)
	int i = 5;
	Integer iObj = new Integer(7);

	int sum = i + iObj;	//에러. 기본형과 참조형 간의 덧셈 불가(JDK1.5 이전)

컴파일 전의 코드
	int i = 5;
	Integer iObj = new Integer(7);

	int sum = i + iObj;

컴파일 후의 코드
	int i = 5;
	Integer iObj = new Integer(7);

	int sum = i + iObj.intValue();

- 기본형의 값을 객체로 자동변환 하는것을 오토박싱, 그 반대는 언박싱
	ArrayList<Integer> list = new ArrayList<Integer>();
	list.add(10);		// 오토박싱. 10 -> new Integer(10)

	int value = list.get(0);	// 언박싱. new Integer(10) -> 10