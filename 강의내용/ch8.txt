ch8-1 프로그램 오류
- 컴파일 에러(compile-time error) : 컴파일 할 때 발생하는 에러
- 런타임 에러(runtime error) : 실행 할 때 발생하는 에러
- 논리적 에러(logical error) : 작성 의도와 다르게 동작

- java의 런타임 에러
- 에러(error)	프로그램 코드에 의해서 수습될 수 없는 심각한 오류
- 예외(exception)	프로그램 코드에 의해서 수습될 수 있는 다소 미약한 오류
- 에러(error)는 어쩔 수 없지만, 예외(exception)는 처리하자.

- 예외처리의 정의와 목적
예외처리(exception handling)의
 정의 : 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것
-----------------------------------------------------------------------------
ch8-2 예외 클래스의 계층 구조
		Object (최고조상)
		Throwable(클래스, 모든 오류의 조상)
	Exception(미약한 오류)	Error(심각한 오류)
RuntimeException	IOException		OutOfMemoryError
-----------------------------------------------------------------------------
ch8-3 Exception과 RuntimeException
Exception클래스들		사용자의 실수와 같은 외적인 요인에 의해 발생하는 예외
RuntimeException클래스들	프로그래머의 실수로 발생하는 예외
-----------------------------------------------------------------------------
ch8-4 예외 처리하기. try-catch문
예외처리(exception handling)의
 정의 : 프로그램 실행 시 발생할 수 있는 예외의 발생에 대비한 코드를 작성하는 것
 목적 : 프로그램의 비정상 종료를 막고, 정상적인 실행상태를 유지하는 것

try {
	//예외가 발생할 가능성이 있는 문장들을 넣는다.
} catch (Exception1 e1) {
	//Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
} catch (Exception2 e2) {
	//Exception2이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
} catch (Exception1 e1) {
	//Exception1이 발생했을 경우, 이를 처리하기 위한 문장을 적는다.
}
if문과 달리, try블럭이나 catch블럭 내에 포함된 문장이, 하나뿐이어도 괄호{}를 생략할수 없다.
-----------------------------------------------------------------------------
ch8-5 try-catch문에서의 흐름
①try블럭 내에서 예외가 발생한 경우,
 1. 발생한 예외와 일치하는 catch블럭이 있는지 확인한다.
 2. 일치하는 catch블럭을 찾게 되면, 그 catch블럭 내의 문장들을 수행하고 전체 try-cath문을 빠져나가서 그 다음 문장을 계속해서 수행한다.
     만일 일치하는 catch블럭을 찾지 못하면, 예외는 처리되지 못한다.

② try블럭 내에서 예외가 발생하지 않은 경우,
 1. catch블럭을 거치지 않고 전체 try-catch문을 빠져나가서 수행을 계속한다.
-----------------------------------------------------------------------------
ch8-6 예외의 발생과 catch블럭
- 예외가 발생하면, 이를 처리할 catch블럭을 찾아 내려감
-----------------------------------------------------------------------------
ch8-7 printStackTrace()와 getMessage()
printStackTrace()	예외발생 당시의 호출스택(Call Stack)에 있었던 메서드의 정보와 예외 메시지를 화면에 출력한다.
getMessage()	발생한 예외클래스의 인스턴스에 저장된 메시지를 얻을 수 있다.

try {
	...
	System.out.println(0/0);	//예외발생!!!
	...
} catch (ArithmeticException ae) {
	ae.printStackTrace();
	System.out.println(ae.getMessage());
} catch (Exception e) {
	...
}
-----------------------------------------------------------------------------
ch8-8 멀티 catch블럭
- 내용이 같은 catch블럭을 하나로 합친 것(JDK1.7부터)
try {
	...
} catch (ExceptionA e) {
	e.printStackTrace();
} catch (ExceptionB e2) {
	e2.printStackTrace();
}

위에 코드를 수정한다면...
try{
	...
} catch (ExceptionA | Exception B e) {
	e.printStackTrace();
}
-----------------------------------------------------------------------------
ch8-9 예외 발생시키기
1. 연산자 new를 이용해서 발생시키려는 예외 클래스의 객체를 만든 다음
	Exception e = new Exception("고의로 발생시켰음");
2. 키워드 throw를 이용해서 예외를 발생시킨다.
	throw e;
-----------------------------------------------------------------------------
ch8-10 checked예외, unchecked예외
- checked예외 : 컴파일러가 예외 처리 여부를 체크(예외 처리 필수)
- unchecked예외 : 컴파일러가 예외 처리 여부를 체크 안함(예외 처리 선택)

checked예외
class Ex8_7 {
	public static void main(String[] args) {
		//체크드 예외(예외처리 필수)
		throw new Exception();	//Exception을 고의로 발생시킨다.
	}
}

unchecked예외
class Ex8_8 {
	public static void main(String[] args) {
		//언체크드 예외(예외처리 선택)
		throw new RuntimeException();	//RuntimeException을 고의로 발생시킨다.
	}
}

에러에는 3가지가 있다!
컴파일에러
런타임에러 - Error : 심각
	   - Exception : 덜심각 - Exception과 자손 : 체크드 예외 (예외처리 필수, 컴파일러가 체크, try-catch)
			     - RuntimeException 자손 : 언체크드 예외 (예외처리 선택)
논리적에러

Exception
	IOException (Checked 예외 try-catch 필수)
	ClassNotFoundException
	...
	RuntimeException (unChecked 예외 try-catch 선택)
		ArithmeticException
		ClassCastException (형변환)
		NullPointerException (Null)
		...
		IndexOutBoundsException (배열범위를 벗어남)
-----------------------------------------------------------------------------
ch8-11 메서드에 예외 선언하기
- 예외를 처리하는 방법 : try-catch문(직접처리), 예외 선언하기 (예외 떠넘기기 (알리기) )
- 메서드가 호출시 발생가능한 예외를 호출하는 쪽에 알리는 것
- 예외를 발생시키는 키워드 throw와 예외를 메서드에 선언할 때 쓰이는 throws를 잘 구별하자!!
- thrwos는 메서드에 예외 선언

void method() throws Exception1, Exception2, ... ExceptionM {
	//메서드의 내용
}

//method()에서 Exception과 그 자손 예외 발생 가능
void method() throws Exception {	//모든종류의 예외가 발생가능
	//메서드의 내용
}

오버라이딩의 조건 3가지
1. 선언부일치
2. 접근제어자 좁게하면 안됨
3. 조상보다 많은 예외 선언이 안됨

예)
static void startInstall() throws SpaceException, MemoryException {
	if(!enoughSpace())	//충분한 설치 공간이 없으면..
		throw new SpaceException("설치할 공간이 부족합니다.");
	if(!enoughMemory()) //충분한 메모리가 없다면..
		throw new MemoryException("메모리가 부족합니다.");
}	// startInstall 메서드의 끝
-----------------------------------------------------------------------------
ch8-12 메서드에 예외 선언하기 (예제)
-----------------------------------------------------------------------------
ch8-13 메서드에 예외 선언하기 (예제)
-----------------------------------------------------------------------------
ch8-14 finally 블럭
- 예외 발생여부와 관계없이 수행되어야 하는 코드를 넣는다.
try{
	//예외가 발생할 가능성이 있는 문장들을 넣는다.
} catch (Exception1 e1) {
	//예외처리를 위한 문장을 적는다.
} finally {
	//예외의 발생여부에 관계없이 항상 수행되어야하는 문장들을 넣는다.
	//finally블럭은 try-catch문의 맨 마지막에 위치해야한다.
}
try블럭 안에 return문이 잇어서 try블럭을 벗어나갈 때도 finally 블럭이 실행된다.
-----------------------------------------------------------------------------
ch8-15 사용자 정의 예외 만들기
- 우리가 직접 예외 클래스를 정의할 수 있다.
- 조상은 Exception(필수처리)과 RuntimeException중에서 선택
class MyException extends Exception {
	MyException(String msg) {	//문자열을 매개변수로 받는 생성자
		super(msg);	//조상인 Exception클래스의 생성자를 호출한다.
	}
}
-----------------------------------------------------------------------------
ch8-16 없음.......;;
-----------------------------------------------------------------------------
ch8-17 예외 되던지기(exception re-throwing)
- 예외를 처리한 후에 다시 예외를 발생시키는 것
- 호출한 메서드와 호출된 메서드 양쪽 모두에서 예외처리하는 것

public class Ex8_12 {
	public static void main(String[] args) {
		try {
			method1();
		} catch (Exception e) {
			System.out.println("main메서드에서 예외가 처리되었습니다.");
		}
	} // main메서드의 끝
	static void method1() throws Exception {
		try {
			throw new Exception();
		} catch (Exception e) {
			System.out.println("method1메서드에서 예외가 처리되었습니다.");
			throw e; //다시 예외를 발생시킨다.
		}
	}	//method1메서드의 끝
}
-----------------------------------------------------------------------------
ch8-18 연결된 예외(chained exception)
- 한 예외가 다른 예외를 발생시킬 수 있다.
- 예외 A가 예외 B를 발생시키면 A는 B의 원인 예외(cause exception)
Throwable initCause(Throwable cause)	지정한 예외를 원인 예외로 등록
Throwable getCause()		원인 예외를 반환

public class Throwable implements Serializable {
	...
	private Throwable cause = this;	//객체 자신(this)을 원인 예외로 등록
	...
	public synchronized Throwable	initCause(Throwable cause)	{
		this.cause = cause;	// cause를 원인 예외로 등록
		return this;
	}
	...
}

void install() throws InstallException {
	try {
		startInstall();	// SpaceException 발생
		copyFiles();
	} catch (SpzceException e)	{
		InstallException ie = new InstallException("설치중 예외발생");	//예외 생성
		ie.initCause(e);	//InstallException의 원인 예외를 SpaceException으로 지정
		throw ie;		//InstallException을 발생시킨다.
	} catch (MemoryException me)	{
		..
	}
}

[이유1] 여러 예외를 하나로 묶어서 다루기 위해서
[이유2] checked예외를 unchecked예외로 변경하려 할 때
static void startInstall() throws SpaceException, MemoryException {
	if(!enoughSpace())	//충분한 설치 공간이 없으면...
		throw new SpaceException("설치할 공간이 부족합니다.");

	if (!enoughMemory())	//충분한 메모리가 부족하면...
		throw new MemoryException("메모리가 부족합니다.");
	}
}

class SpaceException extends Exception {
	SpaceException(String msg) {
		super(msg);
	}
}
위에 것을.. 변경하면..

static void startInstall() throws SpaceException {
	if(!enoughSpace())	//충분한 설치 공간이 없으면...
		throw new SpaceException("설치할 공간이 부족합니다.");

	if (!enoughMemory())	//충분한 메모리가 부족하면...
		throw new RuntimeException(new MemoryException("메모리가 부족합니다."));
	}
}	//startInstall메서드의 끝