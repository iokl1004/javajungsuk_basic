ch14-1 람다식(Lambda Expression)
- 함수(메서드)를 간단한 '식(expression)'으로 표현하는 방법
int max(int a, int b) {
	return a > b ? a : b;
}

위의 코드를 아래와 같이 변경 가능!
(a, b) -> a > b ? a : b


- 익명 함수(이름이 없는 함수, anonymous function)
(int a, int b) {
	return a > b ? a : b;
}

위의 코드를 아래와 같이 변경 가능!
(int a, int b) -> {
	return a > b ? a : b;
}

- 함수와 메서드의 차이
 근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
 함수는 클래스에 독립적, 메서드는 클래스에 종속적
-----------------------------------------------------------------------------
ch14-2 람다식 작성하기
1. 메서드의 이름과 반환타입을 제거하고 '->'를 블록{}앞에 추가한다.
(int a, int b) -> {
	return a > b ? a : b;
}

2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에';'안 붙임)
(int a, int b) -> {
	return a > b ? a : b
}

위의 코드를 람다식 적용하면!
(int a, int b)-> a > b ? a : b

3. 매개변수의 타입이 추론 가능하면 생략 가능(대부분의 경우 생략가능)
(int a, int b) -> a > b ? a : b

위의 코드를 람다식 적용하면!
(a, b) -> a > b ? a : b
-----------------------------------------------------------------------------
ch14-2 람다식 작성하기 - 주의사항
1. 매개변수가 하나인 경우, 괄호() 생략가능(타입이 없을 때만)
a -> a * a	//OK
int a -> a * a	// 에러

2. 블록 안의 문장이 하나뿐 일 때, 괄호{} 생략가능(끝에';' 안 붙임)
(int i) -> {
	System.out.println(i);
}

위의 코드를 람다식 적용하면!
(int i) -> System.out.println(i)
-----------------------------------------------------------------------------
ch14-3 람다식의 예

메서드
int max(int a, int b) {
	return a > b ? a : b
}
람다식
(a, b) -> a > b ? a : b

메서드
int printVar(String name, int i) {
	System.out.println(name+"="+i);
}
람다식
(name, i) -> System.out.println(name+"="+i)

메서드
int square(int x) {
	return x * x;
}
람다식
x -> x * x

메서드 int roll() {
	return (int)(Math.random() * 6);
}
람다식
() -> (int)(Math.random()*6)
-----------------------------------------------------------------------------
14-4 람다식은 익명 함수? 익명 객체!
- 람다식은 익명 함수가 아니라 익명 객체이다.
(a, b) -> a > b ? a : b

위의 코드는 아래의 코드처럼 된다.
new Object() {	//객체의 선언과 생성을 동시에
	int max(int a, int b) {
		return a > b ? a : b;
	}
}

- 람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
Object obj = new Object() {
	int max(int a, int b) {
		return a > b ? a : b;
	}
}
-----------------------------------------------------------------------------
ch14-5 함수형 인터페이스
- 함수형 인터페이스 : 단 하나의 추상메서드만 선언된 인터페이스
interface Myfunction {
	public abstract int max(inst a, int b);
}

위의 코드를 람다식 적용하면
MyFunction f = new MyFunction() {	//익명 클래스 클래스의 선언, 객체생성 동시에!
		public int max(inst a, int b) {
			return a > b ? a : b;
		}
	}

int value = f.max(3,5);	// OK. MyFunction에 max()가 있음

- 함수형 인터페이스 타입의 참조변수로 람다식을 참조할 수 있음.
 (단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야 함.)

Myfunction f = (a, b) -> a > b ? a : b;
int value = f.max(3,5);	// 실제로는 람다식(익명 함수)이 호출됨!
-----------------------------------------------------------------------------
ch14-6 함수형 인터페이스 타입의 매개변수, 반환타입
- 함수형 인터페이스 타입의 매개변수
	void aMethod(MyFunction f) {
		f.myMethod();	//MyFunction에 정의된 메서드 호출
	}

	MyFunction f = ()-> System.out.println("myMethod()");
	aMethod(f);

	aMethod( () -> System.out.println("myMethod() "));

- 함수형 인터페이스 타입의 반환 타입
MyFunction myMethod() {
	MyFunction f= ()->{};
	return f;
}

위의 코드를 람다식 적용하면!
MyFunction myMethod() {
	return ()->{};
}
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(1/3)
- 자주 사용되는 다양한 함수형 인터페이스를 제공.
<그림 14-7-1 참고>
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(2/3)
<그림 14-7-2 참고>
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(3/3)
<그림 14-7-3 참고>