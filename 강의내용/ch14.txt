ch14-1 람다식(Lambda Expression)
- 함수(메서드)를 간단한 '식(expression)'으로 표현하는 방법
int max(int a, int b) {
	return a > b ? a : b;
}

위의 코드를 아래와 같이 변경 가능!
(a, b) -> a > b ? a : b


- 익명 함수(이름이 없는 함수, anonymous function)
(int a, int b) {
	return a > b ? a : b;
}

위의 코드를 아래와 같이 변경 가능!
(int a, int b) -> {
	return a > b ? a : b;
}

- 함수와 메서드의 차이
 근본적으로 동일. 함수는 일반적 용어, 메서드는 객체지향개념 용어
 함수는 클래스에 독립적, 메서드는 클래스에 종속적
-----------------------------------------------------------------------------
ch14-2 람다식 작성하기
1. 메서드의 이름과 반환타입을 제거하고 '->'를 블록{}앞에 추가한다.
(int a, int b) -> {
	return a > b ? a : b;
}

2. 반환값이 있는 경우, 식이나 값만 적고 return문 생략 가능(끝에';'안 붙임)
(int a, int b) -> {
	return a > b ? a : b
}

위의 코드를 람다식 적용하면!
(int a, int b)-> a > b ? a : b

3. 매개변수의 타입이 추론 가능하면 생략 가능(대부분의 경우 생략가능)
(int a, int b) -> a > b ? a : b

위의 코드를 람다식 적용하면!
(a, b) -> a > b ? a : b
-----------------------------------------------------------------------------
ch14-2 람다식 작성하기 - 주의사항
1. 매개변수가 하나인 경우, 괄호() 생략가능(타입이 없을 때만)
a -> a * a	//OK
int a -> a * a	// 에러

2. 블록 안의 문장이 하나뿐 일 때, 괄호{} 생략가능(끝에';' 안 붙임)
(int i) -> {
	System.out.println(i);
}

위의 코드를 람다식 적용하면!
(int i) -> System.out.println(i)
-----------------------------------------------------------------------------
ch14-3 람다식의 예

메서드
int max(int a, int b) {
	return a > b ? a : b
}
람다식
(a, b) -> a > b ? a : b

메서드
int printVar(String name, int i) {
	System.out.println(name+"="+i);
}
람다식
(name, i) -> System.out.println(name+"="+i)

메서드
int square(int x) {
	return x * x;
}
람다식
x -> x * x

메서드 int roll() {
	return (int)(Math.random() * 6);
}
람다식
() -> (int)(Math.random()*6)
-----------------------------------------------------------------------------
14-4 람다식은 익명 함수? 익명 객체!
- 람다식은 익명 함수가 아니라 익명 객체이다.
(a, b) -> a > b ? a : b

위의 코드는 아래의 코드처럼 된다.
new Object() {	//객체의 선언과 생성을 동시에
	int max(int a, int b) {
		return a > b ? a : b;
	}
}

- 람다식(익명 객체)을 다루기 위한 참조변수가 필요. 참조변수의 타입은?
Object obj = new Object() {
	int max(int a, int b) {
		return a > b ? a : b;
	}
}
-----------------------------------------------------------------------------
ch14-5 함수형 인터페이스
- 함수형 인터페이스 : 단 하나의 추상메서드만 선언된 인터페이스
interface Myfunction {
	public abstract int max(inst a, int b);
}

위의 코드를 람다식 적용하면
MyFunction f = new MyFunction() {	//익명 클래스 클래스의 선언, 객체생성 동시에!
		public int max(inst a, int b) {
			return a > b ? a : b;
		}
	}

int value = f.max(3,5);	// OK. MyFunction에 max()가 있음

- 함수형 인터페이스 타입의 참조변수로 람다식을 참조할 수 있음.
 (단, 함수형 인터페이스의 메서드와 람다식의 매개변수 개수와 반환타입이 일치해야 함.)

Myfunction f = (a, b) -> a > b ? a : b;
int value = f.max(3,5);	// 실제로는 람다식(익명 함수)이 호출됨!
-----------------------------------------------------------------------------
ch14-6 함수형 인터페이스 타입의 매개변수, 반환타입
- 함수형 인터페이스 타입의 매개변수
	void aMethod(MyFunction f) {
		f.myMethod();	//MyFunction에 정의된 메서드 호출
	}

	MyFunction f = ()-> System.out.println("myMethod()");
	aMethod(f);

	aMethod( () -> System.out.println("myMethod() "));

- 함수형 인터페이스 타입의 반환 타입
MyFunction myMethod() {
	MyFunction f= ()->{};
	return f;
}

위의 코드를 람다식 적용하면!
MyFunction myMethod() {
	return ()->{};
}
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(1/3)
- 자주 사용되는 다양한 함수형 인터페이스를 제공.
<그림 14-7-1 참고>
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(2/3)
<그림 14-7-2 참고>
-----------------------------------------------------------------------------
ch14-7 java.util.function패키지(3/3)
<그림 14-7-3 참고>
-----------------------------------------------------------------------------
ch14-8 java.util.function패키지 (예제)
-----------------------------------------------------------------------------
ch14-9 Predicate의 결합
- and(), or(), negate()로 두 Predicate를 하나로 결합(default메서드)
Predicate<Integer> p = i -> i <100;
Predicate<Integer> q = i -> i <200;
Predicate<Integer> r = i -> i%2 == 0;

Predicate<Integer> notP = p.negate();		// i >= 100
Predicate<Integer> all = notP.and(q).or(r);	// 100<=i && < 200 || i%2==0
Predicate<Integer> all2 = notP.and(q.or(r));	// 100<= i && (i < 200 || i%2==0)

System.out.println(all.test(2));		//true
System.out.println(all2.test(2));	//false

- 등가비교를 위한 Predicate의 작성에는 isEqual()를 사용(static 메서드)
Predicate<String> p = Predicate.isEqual(str1)	// isEquals() 은 static 메서드
Boolean result = p.test(str2);	// str1과 str2가 같은지 비교한 결과를 반환
-----------------------------------------------------------------------------
ch14-10 Predicate의 결합 (예제)
-----------------------------------------------------------------------------
ch14-11 컬렉션 프레임웍과 함수형 인터페이스
- 함수형 인터페이스를 사용하는 컬렉션 프레임 웍의 메서드(와일드 카드 생략)
<그림 14-11-1 참고>
-----------------------------------------------------------------------------
ch14-12 컬렉션 프레임웍과 함수형 인터페이스 (예제)
-----------------------------------------------------------------------------
ch14-13 메서드 참조(method reference)
- 하나의 메서드만 호출하는 람다식은 '메서드 참조'로 간단히 할 수 있다.

종류				람다				메서드 참조
static 메서드 참조			(x)-> ClassName.method(x)		ClassName::method
인스턴스메서드 참조		(obj,x) -> obj.method(x)		ClassName::method
특정 객체 인스턴스 메서드 참조	(x) -> obj.method(x)		obj::method

- static 메서드 참조
Integer method(String a) {	// 그저 Integer.parseInt(String s) 만 호출
	return Integer.parseInt(s);
}

Function<String, Integer> f = (String s) -> Integer.parseInt(s);

Function<String, Integer> f = Integer::parseInt;	// 메서드 참조
-----------------------------------------------------------------------------
ch14-14 생성자의 메서드 참조
- 생성자와 메서드 참조
Supplier<MyClass> s = () -> new MyClass();
Supplier<MyClass> s = MyClass::new;
Function<Integer, MyClass> s = (i) -> new MyClass(i);
Function<Integer, MyClass> s = MyClass::new;

- 배열과 메서드 참조
Function<Integer, int[]> f = x -> int[x];	//람다식
Function<Integer, int[]> f2 = int[]::new; //메서드 참조
-----------------------------------------------------------------------------
ch14-15 스트림(Stream)
- 다양한 데이터 소스를 표준화된 방법으로 다루기 위한 것
List<Integer> list = Arrays.asList(1,2,3,4,5);
Stream<Integer> intStream = list.stream();	//컬렉션.
Stream<String> strStream = Stream.of(new String[] {"a","b","c"});	//배열
Stream<Integer> evenStream = Stream.iterate(0, n->n+2);	// 0, 2, 4, 6 ...
Stream<Double> randomStream = Stream.generate(Math::random);	//람다식
IntStream	intStream = new Random().ints(5);	//난수 스트림(크기가 5)

- 스트림이 제공하는 기능 - 중간 연산과 최종연산
중간 연산 : 연산결과가 스트림인 연산. 반복적으로 적용 가능
최종 연산 : 연산결과가 스트림이 아닌 연산. 단 한번만 적용가능(스트림의 요소를 소모)
	
stream.distinct().limit(5).sorted().forEach(System.out::println)

distinct() : 중간연산 / 중복제거
limit(5) : 중간연산 / 5개짜르기
sorted() : 중간연산 / 정렬
forEach(System.out::println) : 최종연산 / 출력
-----------------------------------------------------------------------------
ch14-16(Stream)의 특징(1/3)
- 스트림은 데이터 소스로부터 데이터를 읽기만할 뿐 변경하지 않는다.
List<Integer> list = Arrays.asList(3, 1, 5, 4, 2);
List<Integer> sortedList = list.stream().sorted()	//list를 정렬해서
		.collect(Collectors.toList());	//새로운 List에 저장
System.out.println(list);	// [3, 1, 5, 4, 2]
System.out.println(sortedList);	// [1, 2, 3, 4, 5]

- 스트림은 Iterator처럼 일회용이다.(필요하면 다시 스트림을 생성해야 함)
strStream.forEach(System.out::println);	// 모든 요소를 화면에 출력 (최종연산)
int numOfStr = strStream.count();	// 에러. 스트림이 이미 닫혔음.

- 최종 연산 전까지 중간연산이 수행되지 않는다. - 지연된 연산
IntStream intStram = new Random.ints(1, 46);	// 1~45범위의 무한 스트림
intStream.distinct().limit(6).sorted()		// 중간 연산
	.forEach(i->System.out.print(i+","));	// 최종 연산
-----------------------------------------------------------------------------
ch14-16(Stream)의 특징(2/3)
- 스트림은 작업을 내부 반복으로 처리한다.
for(String str : strList)
	System.otu.println(str);

위의 코드를 아래의 코드처럼 변경이 가능하다!
stream.forEach(System.out::println);

void forEach(Consumer<? super T> action) {
	Objects.requireNonNull(action);	//매개변수의 널 체크

	for(T t : src)	// 내부 반복(for문을 메서드 안으로 넣음)
		action.accept(T);
}
-----------------------------------------------------------------------------
ch14-16(Stream)의 특징(3/3)
- 스트림의 작업을 병렬로 처리 - 병력스트림
Stream<String> strStream = Stream.of("dd", "aaa", "CC", "cc", "b");
int sum = strStream.parallel()	//병령 스트림으로 전환(속성만 변경)
		.mapToInt(s -> s.length()).sum();	//모든 문자열의 길이의 합

- 기본형 스트림 - IntStream, LongStream, DoubleStream
 - 오토박싱&언박싱의 비효율이 제거됨(Stream<Integer>대신 IntStream사용)
 - 숫자와 관련된 유용한 메서드를 Stream<T>보다 더 많이 제공
-----------------------------------------------------------------------------
ch14-17스트림 만들기 - 컬렉션
- Collection 인터페이스의 stream()으로 컬렉션을 스트림으로 변환
	Stream<E> stream() // Collection인터페이스의 메서드

List<Intege>	list = Arrays.asList(1, 2, 3, 4, 5);
Stream<Integer>	intStream = list.stream();	// list를 스트림으로 변환

// 스트림의 모든 요소를 출력
intStream.forEach(System.out::print);	// 12345
intStream.forEach(System.out::print);	// 에러. 스트림이 이미 닫혔다.
-----------------------------------------------------------------------------
ch14-18 스트림 만들기 - 배열
- 객체 배열로부터 스트림 생성하기
Stream<T> Stream.of(T... values) // 가변 인자
Stream<T> Stream.of(T[])
Stream<T> Arrays.stream(T[])
Stream<T> Arrays.stream(T[] array, int startInclusive, int endExclusive)
Stream<String> strStream = Stream.of("a","b","c"); // 가변인자
Stream<String> strStream = Stream.of(new String[]{"a","b","c"}); // 가변인자
Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"});
Stream<String> strStream = Arrays.stream(new String[]{"a","b","c"}, 0, 3);

- 기본형 배열로부터 스트림 생성학
IntStream IntStream.of(int... values)	//Stream이 아니라 IntStream
IntStream IntStream.of(int[])
IntStream Arrays.stream(int[])
IntStream Arrays.stream(int[] array, int startInclusive, int endExclusive)
-----------------------------------------------------------------------------
ch14-19 스트림 만들기 - 임의의 수
- 난수를 요소로 갖는 스트림 생성하기
IntStreamintStram = new Random().ints();	// 무한 스트림
intStream.limit(5).forEach(System.out::println);	// 5개의 요소만 출력한다.

IntStream intStream = new Random().ints(5);	//크기가 5인 난수 스트림을 반환

Integer.MIN_VALUE <= ints()	<= Integer.MAX_VALUE
Long.MIN_VALUE <= longs() <= Long.MAX_VALUE
0.0 <= doubles() < 1.0

* 지정된 범위의 난수를 요소로 갖는 스트림을 생성하는 메서드(Random클래스)
IntStream	ints(int begin, int end)			// 무한 스트림
LongStream	longs(long begin, long end)
DoubleStream 	doubles(double begin, double end)

IntStream	ints(long streamSize, int begin, int end)	// 유한 스트림
LongStream	longs(long streamSize, long begin, long end)
DoubleStream 	doubles(long streamSize, double begin, double end)
-----------------------------------------------------------------------------
ch14-20 스트림 만들기 - 특정 범위의 정수
- 특정 범위의 정수를 요소로 갖는 스트림 생성하기(IntStream, LongStream)
	IntStream IntStream.range(int begin, int end)
	IntStream IntStream.rangeClosed(int begin, int end)

IntStream intStream = IntStream.range(1, 5);		//1,2,3,4
IntStream intStream = IntStream.rangeClosed(1, 5); 	// 1,2,3,4,5
-----------------------------------------------------------------------------
ch14-21 스트림 만들기 - 람다식 iterate(), generate()
- 람다식을 소스로 하는 스트림 생성하기
static <T> Stream<T> iterate(T seed, UnaryOperator<T> f)	//이전 요소에 종속적
static <T> Stream<T> generate(Supplier<T> s)			//이전 요소에 독립적

- iterate()는 이전 요소를 seed로 해서 다음 요소를 계산한다.
Stream<Integer> evenStream = Stream.iterate(0, n->n+2);	//0 ,2, 4, 6...

- generate()는 seed(초기값)를 사용하지 않는다.
Stream<Double>	randomStream	= Stream.genrate(Math::random);
Stream<Integer>	oneStream	= Stream.genrate(()->1);
-----------------------------------------------------------------------------
ch14-22 스트림 만들기 - 파일과 빈 스트림
- 파일을 소스로 하는 스트림 생성하기
Stream<Path> Files.list(Path dir)	// Path는 파일 또는 디렉토리

Stream<String> Files.lines(Path path)	//파일의 내용을 라인 단위로 스트링 요소로 만든다. 로그 파일 분석할때 유용함!
Stream<String> Files.lines(Path path, Charset cs)
Stream<String> lines()	// BufferedReader클래스의 메서드

- 비어있는 스트림 생성하기
Stream emptyStream = Stream.empty();	// empty()는 빈 스트림을 생성해서 반환한다.
long count = emptyStream.count();		// count의 값은 0
-----------------------------------------------------------------------------
ch14-23 스트림의 연산
- 스트림이 제공하는 기능 - 중간 연산과 최종연산
중간 연산 : 연산결과가 스트림인 연산. 반복적으로 적용 가능
최종 연산 : 연산결과가 스트림이 아닌 연산. 단 한번만 적용가능(스트림의 요소를 소모)
	
stream.distinct().limit(5).sorted().forEach(System.out::println)
-----------------------------------------------------------------------------
ch14-24 스트림의 연산 - 중간 연산
<그림 14-24-1 참고>
-----------------------------------------------------------------------------
ch14-25 스트림의 연산 - 최종 연산
<그림 14-25-1 참고>
-----------------------------------------------------------------------------
ch14-26 스트림의 중간연산(1/7)
- 스트림 자르기 - skip(), limit()
Stream<T> skip(long n)		//앞에서부터 n개 건너뛰기
Stream<T>limit(long maxSize)	// maxSize 이후의 요소는 잘라냄

IntStream intStream = Int Stream.rangeClosed(1, 10);	//12345678910
intStream.skip(3).limit(5).forEach(System.out::print);	//45678
-----------------------------------------------------------------------------
ch14-27 스트림의 중간연산(2/7)
- 스트림의 요소 걸러내기 - filter(), distinct()
Stream<T> filter(Predicate<?super T> predicate)	//조건에 맞지 않는 요소 제거
Stream<T> distinct()				//중복 제거

IntStream inStream = IntStream.of(1,2,2,3,3,3,4,5,5,6);
intStream.distinct().forEach(System.out::print);		//123456

IntStream intStream = IntStream.rangeClosed(1, 10);	//12345678910
intStream.filter(i->i%2==0).forEach(System.out::print);	//246810

intStream.filter(i->i%2!=0 && 1%3!=0).forEach(System.out::print);
intStream.filter(i->i%2!=0).filter(i->i%3!=0).forEach(System.out::print);
-----------------------------------------------------------------------------
ch14-28 스트림의 중간연산(3/7)
- 스트림 정렬하기 - sorted()
Stream<T> sorted()	//스트림 요소의 기본 정렬(Comparable)로 정렬
Stream<T> sorted(comparator<?super T> comparator)	//지정된 Comparator로 정렬

<그림 14-28-1 참고>
-----------------------------------------------------------------------------
ch14-29 스트림의 중간연산(4/7)
- Comparator의 comparing()으로 정렬 기준을 제공
	comparing(Function<T, U> keyExtractor)
	comparing(Function<T, U> keyExtractor, Comparator<U> KeyComparator)

studentStream.sorted(Comparator.comparing(Student::getBan)) //반별로 정렬
		.forEach(System.out::println);

- 추가 정렬 기준을 제공할 때는 thenComparing()을 사용
	thenComparing(Comparator<T> other)
	thenComparing(Function<T, U> keyExtractor)
	thenComparing(Function<T, U> keyExtractor, Comparator<U> keyComp)

studentStream.sorted(Comparator.comparing(Student::getBan)	// 반 별로 정렬
		.thenComparing(Student::getTotalScore)	// 총점별로 정렬
		.thenComparing(Student::getName)		// 이름별로 정렬
		.ForEach(System.out::println)
-----------------------------------------------------------------------------
ch14-30 스트림의 중간연산(5/7)
- 스트림의 요소 변환하기 - map()
Stream<R> map(Function<? super T, ? extends R> mapper) //Stream<T>→Stream<R>

Stream<File> fileStream = Stream.of(new File("Ex1.java"), new File("Ex1")
	new File("Ex1.bak"), new File("Ex2.java"), new File("Ex1.txt"));

Stream<String>filenameStream = fileStream.map(File::getName);
filenameStream.forEach(System.out::println);	// 스트림의 모든 파일의 이름을 출력

		(map.File::getName)
Stream<File> -------------------------------> Stream<String>

ex) 파일 스트림(Stream<File>)에서 파일 확장자(대문자)를 중복없이 뽑아내기
fileStream.map(File::getName)		//Stream<File> → Stream<String>
	.filter(s->s.indexOf('.')!=-1)		//확장자가 없는 것은 제외
	.map(s->s.substring(s.indexOf('.')+1))	// Stream<String>→Stream<String>
	.map(String::toUpperCase)		// Stream<String>→Stream<String>
	.distinct()	//중복 제거
	.forEach(System.out::print);	//JAVABAKTXT
-----------------------------------------------------------------------------
ch14-31 스트림의 중간연산(5/7) (예제)
-----------------------------------------------------------------------------
ch14-32 스트림의 중간연산(6/7)
- 스트림의 요소를 소비하지 않고 엿보기 - peak()
Stream<T> peek(Consumer<? super T> action)	//중간 연산(스트림을 소비X)
void	forEach(Consumer<? super T> action)	//최종 연산(스트림을 소비O)

fileStream.map(File::getName)	//Stream<File> → Stream<String>
	.filter(s -> s.indexOf('.'!=-1)	//확장자가 없는 것은 제외
	.peek(s->System.out.pritf("filename=%s%n", s))	// 파일명을 출력한다.
	.map(s -> s.substring(s.indexOf('.')+1))	//확장자만 추출
	.peek(s -> System.out.printf("extension=%s%n", s))	//확장자를 출력한다.
	.forEach(System.out::println);	//최종연산 스트림을 소비.
-----------------------------------------------------------------------------
ch14-33 스트림의 중간연산(7/7)
- 스트림의 스트림을 스트림으로 변환 - flatMap()
Stream<String[]> strArrStrm = Stream.of(new String[]{"abc", "def", "ghi" },
				new String[] {"ABC", "GHI", "JKLMN"});

Stream<Stream<String>> strStrStrm = strArrStrm.map(Arrays::stream);

Steam<String> strStrStrm = strArrStrm.flatMap(Arrays::stream);	// Arrays.stream(T[]);