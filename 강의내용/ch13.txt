ch13-1 프로세스와 쓰레드(process & thread)
- 프로세스 : 실행 중인 프로그램, 자원(resources)과 쓰레드로 구성
- 쓰레드 : 프로세스 내에서 실제 작업을 수행.
	모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
		프로세스 : 쓰레드 = 공장 : 일꿀
- 싱글 쓰레드 프로세스 (일꾼1명)
 = 자원 + 쓰레드

- 멀티 쓰레드 프로세스 (일꾼  n명)
 = 자원 + 쓰레드 + 쓰레드 + 쓰레드 .....

-PID는 프로세스 ID

"하나의 새로운 프로세스를 생성하는 것보다
 하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다."
- 2 프로세스 1쓰레드 vs 1프로세스 2 쓰레드
-----------------------------------------------------------------------------
ch13-2 멀티쓰레드의 장단점
대부분의 프로그램이 멀티쓰레드로 작성되어 있다.
그러나, 멀티쓰레드 프로그래밍이 장점만 있는 것은 아니다.

장점
 - 시스템 자원을 보다 효율적으로 사용할 수 있다.
 - 사용자에 대한 응답성(responseness)이 향상된다.
 - 작업이 분리되어 코드가 간결해 진다.
단점
 - 동기화(synchronization)에 주의해야 한다.
 - 교착상태(dead-lock)가 발생하지 않도록 주의해야 한다.
 - 각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.
-----------------------------------------------------------------------------
ch13-3 쓰레드의 구현과 실행
① Thread클래스를 상속
class MyThread extends Thread {
	public void run() {	//Thread클래스의 run()을 오버라이딩
		/* 작업내용 */
	}
}

② Runnable인터페이스를 구현
class MyThread2 implements Runnable {
	public void run() {	//Runable 인터페이스의 추상 메서드 run()을 구현
		/* 작업내용 */
	}
}

//Thread클래스를 상속
MyThread t1 = new MyThread();	//쓰레드의 생성
t1.start();	// 쓰레드의 실행

//Runnable인터페이스를 구현
Runnable r = new MyThread2();
Thread t2 = new Thread(r);	//Thread(Runnable r)
//	Thread t2 = new Thread(new MyThrread2());
t2.start();
-----------------------------------------------------------------------------
ch13-4 쓰레드의 구현과 실행 (예제)
-----------------------------------------------------------------------------
ch13-5 쓰레드의 실행 - start()
- 쓰레드를 생성한 후에 start()를 호출해야 쓰레드가 작업을 시작한다.
	ThreadEx1_1 t1 = new ThreadEx1_1();	//쓰레드 t1을 생성한다.
	ThreadEx1_1 t2 = new ThreadEx1_1();	//쓰레드 t2을 생성한다.

	t1.start();	//쓰레드 t1을 실행시킨다.
	t2.start();	//쓰레드 t2을 실행시킨다.
-----------------------------------------------------------------------------
ch13-6 start()와 run()
class ThreadTest {
	public static void main(String args[]) {
		MyThread t1 = new MyThread();
		t1.start();
	}
}

class MyThread extends Thread {
	public void run() {
		//...
	}
}
-----------------------------------------------------------------------------
ch13-7 main쓰레드
- main메서드의 코드를 수행하는 쓰레드
public class Hello {
	public static void main(String[] args) {
		System.out.println("Hello, world.");
	}
}

- 쓰레드는 '사용자 쓰레드'와 '데몬 쓰레드'(보조 쓰레드) 두 종류가 있다.

실행 중인 사용자 쓰레드가 하나도 없을 때 프로그램은 종료된다.
-----------------------------------------------------------------------------
ch13-8 싱글쓰레드와 멀티쓰레드
- 싱글쓰레드
class ThreadTest {
	public static void main(String args[]) {
		for(int i=0; i< 300; i++) {
			System.out.println("-");
		}

		for(int i=0; i< 300; i++) {
			System.out.println("l");
		}
	}	//main
}

- 멀티쓰레드
class ThreadTest {
	public static void main(String args[]) {
		MyThread1 th1 = new MyThread1 ();
		MyThread2 th2 = new MyThread2 ();
		th1.start();
		th2.start();
	}
}

class MyThread1 extends Thread {
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.println("-");
		}
	} // run()
}

class MyThread2 extends Thread {
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.println("|");
		}
	} // run()
}
-----------------------------------------------------------------------------
ch13-9~10 싱글쓰레드와 멀티쓰레드 (예제)
-----------------------------------------------------------------------------
ch13-11 쓰레드의 I/O 블락킹(blocking)

class ThreadEx6 {
	public static void main(String[] args) {
		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다.");

	for(int i=10; i > 0; i --) {
		System.out.println(i);
		try { Thread.sleep(1000) }
		catch( Exception e) { }
	}	//main
}

class ThreadEx7 {
	public static void main(String[] args) {
		ThreadEx7_1 th1 = new ThreadEx7_1();
		thr1.start();

		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다.");
	}
}

class ThreadEx7_1 extends Thread {
	public void run() {
		for(int i=10; i > 0; i--) {
			System.out.println(i);
			try { sleep(1000); } catch(Exception e ) {}
		}
	}// run()
}
-----------------------------------------------------------------------------
ch13-12~13 쓰레드의 I/O 블락킹(blocking) (예제)
-----------------------------------------------------------------------------
ch13-14 쓰레드의 우선순위(priority of thread)
- 작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업시간을 갖게 할 수 있다.
void setPriority(int newPriority)	쓰레드의 우선순위를 지정한 값으로 변경한다.
int getPriority()			쓰레드의 우선순위를 반환한다.

public static final int MAX_PRIORITY = 10	// 최대우선순위
public static final int MIN_PRIORITY = 1	// 최소우선순위
public static final int NORM_PRIORITY = 5	// 보통우선순위
-----------------------------------------------------------------------------
ch13-15 쓰레드의 우선순위(priority of thread) (예제)
-----------------------------------------------------------------------------
ch13-16 쓰레드 그룹
- 서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한 것
- 모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다.
- 쓰레드 그룹을 지정하지 않고 생성한 쓰레드는 'main쓰레드 그룹'에 속한다.
- 자신을 생성한 쓰레드(부모 쓰레드)의 그룹과 우선순위를 상속받는다.
Thread(ThreadGroup group, String name)
Thread(ThreadGroup group, Runnable target)
Thread(ThreadGroup group, Runnable target, String name)
Thread(ThreadGroup group, Runnable target, String name, long stackSize)

ThreadGroup getThreadGroup()	쓰레드 자신이 속한 쓰레드 그룹을 반환한다.
void uncaughtException(Thread t, Throwable e) 처리되지 않은 예외에 의해 쓰레드 그룹의 쓰레드가 실행이 종료되었을 때, JVM에 의해 이 메서드가 자동적으로 호출된다.
-----------------------------------------------------------------------------
ch13-17 쓰레드 그룹의 메서드
<그림 ch13-17-1 참고>
-----------------------------------------------------------------------------
ch13-18 데몬 쓰레드(daemon thread)
- 일반 쓰레드(non-daemon thread)의 작업을 돕는 보조적인 역할을 수행.
- 일반 쓰레드가 모두 종료되면 자동적으로 종료된다.
- 가비지 컬렉터, 자동저장, 화면 자동갱신 등에 사용된다.
- 무한루프와 조건문을 이용해서 실행 후 대기하다가 특정조건이 만족되면
   작업을 수행하고 다시 대기하도록 작성한다.

	boolean isDaemon() - 쓰레드가 데몬 쓰레드인지 확인한다. 데몬 쓰레드이면 true를 반환
	void setDaemon(boolean on) - 쓰레드를 데몬 쓰레드로 또는 사용자 쓰레드로 변경, 매개변수 on을 true로 지정하면 데몬 쓰레드가 된다.

* setDaemon(boolean on)은 반드시 start()를 호출하기 전에 실행되어야 한다.
그렇지 않으면 IllegalThreadStateException이 발생한다.
-----------------------------------------------------------------------------
ch13-19 데몬 쓰레드(daemon thread) (예제)
-----------------------------------------------------------------------------
ch13-20 쓰레드의 상태
<그림 ch13-20-1 참고>
-----------------------------------------------------------------------------
ch13-21 쓰레드의 실행제어
- 쓰레드의 실행을 제어할 수 있는 메서드가 제공된다.
  이 들을 활용해서 보다 효율적인 프로그램의 작성할 수 있다.
<그림 ch13-21-1 참고>
-----------------------------------------------------------------------------
ch13-22 sleep()
- 현재 쓰레드를 지정된 시간동안 멈추게 한다.
	static void sleep(long millis)		// 천분의 일초 단위
	static void sleep(long mills, int nanos)	// 천분의 일초 + 나노초

- 예외처리를 해야한다.(InterruptedException이 발생하면 깨어남)
	try{
		Thread.sleep(1, 500000);	//쓰레드를 0.0015초 동안 멈추게 한다.
	} catch(InterruptedException e) {}

void delay(long millis) {
	try {
		Thread.sleep(mills);
	} catch(InterruptedException e) {}
}

- 특정 쓰레드를 지정해서 멈추게 하는 것은 불가능하다.
try {
	th1.sleep(2000);
} catch (InterruptedException e) {}

위에 코드를 사용하는것보다 아래의 코드처럼 사용하는게 낫다!
try {
	Thread.sleep(2000);
} catch (InterruptedException e) {}
-----------------------------------------------------------------------------
ch13-24 interrupt()
- 대기상태(WAITING)인 쓰레드를 실행대기 상태(RUNNABLE)로 만든다.
void	interrupt()	쓰레드의 interrupted상태를 false에서 true로 변경.
boolean	isInterrupted()	쓰레드의 interrupted상태를 반환.
static boolean interrupted()	현재 쓰레드의 interrupted상태를 알려주고, fasle로 초기화

public static void main(String[] args){
	ThreadEx13_2 th1 = new ThreadEx13_2();
	th1.start();
	...
	th1.interrupt();	//interrupt()를 호출하면, interrupted상태가 true가 된다.
	...
	System.out.println("isInterrupted():" + th1.isInterrupted()));	//true
}

class Thread { //알기 쉽게 변경한 코드
	...
	boolean interrupted = false;
	...
	boolean isInterrupted() {
		return interrupted() {
	}

	boolean interrupt() {
		interrupted = true;
	}
}

class ThreadEx13_2 extends Thread {
	public void run() {
		...
		while( download && !isInterrupted()) {
			// download를 수행한다.
			...
		}

		System.out.println("다운로드가 끝났습니다.");
	} //main
}
-----------------------------------------------------------------------------
ch13-25 interrupt() (예제)
-----------------------------------------------------------------------------
ch13-26 suspend(), resume(), strop()
- 쓰레드의 실행을 일시정지, 재개, 완전정지 시킨다.
	void suspend() 	쓰레드를 일시정지 시킨다.
	void resume()	suspend()에 의해 일시정지된 쓰레드를 실행대기상태로 만든다.
	void stop()	쓰레드를 즉시 종료시킨다.

- suspend(), resume(), stop()은 교착상태에 빠지기 쉬워서 deprecated되었다.
데드락(교착상태)이란? 예를들어 A쓰레드가 B쓰레드 원하는걸 갖고 있고, B쓰레드가 A쓰레드 원하는걸 갖고 있는경우 작업이 진행안됨.

class ThreadEx17_1 implements Runnable {
	boolean suspended = false;
	boolean stopped = false;

	public void run() {
		while(!stopped) {
			if(!suspended) {
				/* 쓰레드가 수행할 코드를 작성 */
			}
		}
	}
	public void suspend()	{ suspended = true; }
	public void resume()	{ suspended = false; }
	public void stop()		{ stopped = true; }
}
-----------------------------------------------------------------------------
ch13-28 join()
- 지정된 시간동안 특정 쓰레드가 작업하는 것을 기다린다.
	void join()			//작업이 모두 끝날 때까지
	void join(long millis)		//천분의 일초 동안
	void join(long millis, int nanos)	//천분의 일초 + 나노초 동안

- 예외처리를 해야 한다.(InterruptedException 발생하면 작업 재개
public static void main(String args[]) {
	ThreadEx19_1 th1 = new ThreadEx19_1();
	ThreadEx19_2 th2 = new ThreadEx19_2();
	th1.atart();
	th2.atart();
	startTime = System.currentTimeMillis();

	try {
		th1.join();	// main쓰레드가 th1의 작업이 끝날 때 까지 기다린다.
		th2.join();	// main쓰레드가 th2의 작업이 끝날 때 까지 기다린다.
	} catch(interruptedException e) {}

	System.out.print("소요시간:" + (System.currentTimeMillis() - ThreadEx19.startTime));
} // main
-----------------------------------------------------------------------------
ch13-28 join() - 예시
public void run() {
	while(true) {
		try {
			Thread.sleep(10 * 1000);	// 10초를 기다린다.
		} catch(InterruptedException e) {
			System.out.println("Awaken by interrupt().");
		}

		gc();	//garbage collection을 수행한다. ( 사용하지 않는 객체제거 )
		System.out.println("Garbage Collected. Free Memory : " + freeMemory());
	}
}

for(int i=0; i < 20; i++) {
	requiredMemory = (int)(Math.random() * 10) * 20;
	//필요한 메모리가 사용할 수 있는 양보다 적거나 전체 메모리의 60%이상 사용햇을 경우 gc를 깨운다.
	if(gc.freeMemory() < requiredMemory ||
		gc.freeMemory() < gc.totalMemory() * 0.4)
	{
		gc.interrupt();	//잠자고 있는 쓰레드 gc를 깨운다.
		// gc를 깨우고, 메모리를 사용할 시간을 줘야한다.
		try {
			gc.join(100);
		} catch(InterruptedException e) {}
	}
	gc.usedMemory += requiredMemory;
	System.out.println("usedMemory:"+gc.usedMemory);
}
-----------------------------------------------------------------------------
ch13-29 yield() (static 메서드)
- 남은 시간을 다음 쓰레드에게 양보하고, 자신(현재 쓰레드)은 실행대기한다.
- yield()와 interrupt()를 적절히 사용하면, 응답성과 효율을 높일 수 있다.

class 
MyThreadEx18 implements Runnable {
	boolean suspended = false;
	boolean stopped = false;

	Thread th;

	MyThreadEx18(String name) {
		th = new Thread(this, name);
	}

	public void run() {
		while(!stopped) {
			if(!suspended) {
				/*
					작업 수행
				*/
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {}
			} else {
				Thread.yield();
			} //if
		} //while
	}

public void start() {
	th.start();
}

public void resume() {
	suspended = false;
}

public void suspend() {
	suspended = true;
	th.interrupt();
}

public void stop() {
	stopped = true;
	th.interrupt();
}
-----------------------------------------------------------------------------
13-30 쓰레드의 동기화(synchronization)
- 멀티 쓰레드 프로세스에서는 다른 쓰레드의 작업에 영향을 미칠 수 있다.
- 진행중인 작업이 다른 쓰레드에게 간섭받지 않게 하려면 '동기화'가 필요
	쓰레드의 동기화 - 한 쓰레드가 진행중인 작업을 다른 쓰레드가 간섭하지 못하게 막는 것

- 동기화 하려면 간섭받지 않아야 하는 문장들을 '임계 영역'으로 설정
- 임계영역은 락(lock)을 얻은 단 하나의 쓰레드만 출입가능(객체 1개에 락 1개)
-----------------------------------------------------------------------------
13-31 synchronized를 이용한 동기화
- synchronized로 임계영역(lock이 걸리는 영역)을 설정하는 방법 2가지
임계영역이란? 다른 쓰레드가 간섭하면 안되는 문장들을 묵어주는것
되도록이면 메서드 를 임계영역으로 설정하지 않는것을 추천!

1. 메서드 전체를 임계 영역으로 지정
	public synchronized void clacSum() { // 임계영역
		//...
	}

2. 특정한 영역을 임계 영역으로 지정
	synchronized(객체의 참조변수) { // 임계영역
		//...
	}

public synchronized void withdraw(int money) {
	if(balance >= money) {
		try {
			Thread.sleep(1000);
		} catch (Exception e) {}

		balance -= money;
	}
}
-----------------------------------------------------------------------------
13-32 synchronized를 이용한 동기화 - 예제

class Account2 {
	private int balance = 1000;	//private으로 해야 동기화가 의미가 있다.

	public int getBalance() {
		return balance;
	}
	
	//synchronized가 없을경우 통장 잔고가 마이너스(-)가 찍히는 경우가 있음.
	public synchronized void withdraw(int money) //synchronized로 메서드를 동기화
		if(balance >= money) {
			try{ Thread.sleep(1000);} catch(InterruptedException e) {
			balance -= money;
		}
	} // withdraw
}

class RunnableEx22 implements Runnalbe {
	Account2 acc = new Account2();

	public void run() {
		while(acc.getBalance() > 0) {
			// 100, 200, 300중의 한 값을 임의로 선택해서 출금(withdraw)
			int money = (int)(Math.random() * 3 + 1) * 100;
			acc.withdraw(money);
			System.out.println("balance:"+acc.getBalance());
		}
	} // run()
}

class ThreadEx22 {
	public static void main(String args[]) {
		Runnable r = new RunnableEx22();
		new Thread(r).start();
		new Thread(r).start();
	}
}
-----------------------------------------------------------------------------
13-33 synchronized를 이용한 동기화 - 예제
-----------------------------------------------------------------------------
13-14 wait()과 notify()
- 동기화의 효율을 높이기 위해 wait(), notify()를 사용.
- Object클래스에 정의되어 있으며, 동기화 블록내에서만 사용할 수 있다.

wait() - 객체의 lock을 풀고 쓰레드를 해당 객체의 waiting pool에 넣는다.
notify() - waiting pool에서 대기중인 쓰레드 중의 하나를 깨운다. (손님 한명만 골라가지고 귓속말)
notifyAll() - waiting pool에서 대기중인 모든 쓰레드를 깨운다. (방송)
- 일반적으로 notifyAll을 사용하는걸 추천

class Account {
	int balance = 1000;

	public synchronized void withdraw(int money) {	//임계 영역
		while (balance < money) {
			try {
				wait();	//대기 - 락을 풀고 기다린다. 통지를 받으면 락을 재획득(ReEntrance)
			} catch(InterruptedException e) {}
		}

		balance -= money;
	} // withdraw

	public synchronized void deposit(int money) {	//임계 영역
		balance += money;
		notify();	// 통지 - 대기중인 쓰레드 중 하나에게 알림.
	}
}