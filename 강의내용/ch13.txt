ch13-1 프로세스와 쓰레드(process & thread)
- 프로세스 : 실행 중인 프로그램, 자원(resources)과 쓰레드로 구성
- 쓰레드 : 프로세스 내에서 실제 작업을 수행.
	모든 프로세스는 최소한 하나의 쓰레드를 가지고 있다.
		프로세스 : 쓰레드 = 공장 : 일꿀
- 싱글 쓰레드 프로세스 (일꾼1명)
 = 자원 + 쓰레드

- 멀티 쓰레드 프로세스 (일꾼  n명)
 = 자원 + 쓰레드 + 쓰레드 + 쓰레드 .....

-PID는 프로세스 ID

"하나의 새로운 프로세스를 생성하는 것보다
 하나의 새로운 쓰레드를 생성하는 것이 더 적은 비용이 든다."
- 2 프로세스 1쓰레드 vs 1프로세스 2 쓰레드
-----------------------------------------------------------------------------
ch13-2 멀티쓰레드의 장단점
대부분의 프로그램이 멀티쓰레드로 작성되어 있다.
그러나, 멀티쓰레드 프로그래밍이 장점만 있는 것은 아니다.

장점
 - 시스템 자원을 보다 효율적으로 사용할 수 있다.
 - 사용자에 대한 응답성(responseness)이 향상된다.
 - 작업이 분리되어 코드가 간결해 진다.
단점
 - 동기화(synchronization)에 주의해야 한다.
 - 교착상태(dead-lock)가 발생하지 않도록 주의해야 한다.
 - 각 쓰레드가 효율적으로 고르게 실행될 수 있게 해야 한다.
-----------------------------------------------------------------------------
ch13-3 쓰레드의 구현과 실행
① Thread클래스를 상속
class MyThread extends Thread {
	public void run() {	//Thread클래스의 run()을 오버라이딩
		/* 작업내용 */
	}
}

② Runnable인터페이스를 구현
class MyThread2 implements Runnable {
	public void run() {	//Runable 인터페이스의 추상 메서드 run()을 구현
		/* 작업내용 */
	}
}

//Thread클래스를 상속
MyThread t1 = new MyThread();	//쓰레드의 생성
t1.start();	// 쓰레드의 실행

//Runnable인터페이스를 구현
Runnable r = new MyThread2();
Thread t2 = new Thread(r);	//Thread(Runnable r)
//	Thread t2 = new Thread(new MyThrread2());
t2.start();
-----------------------------------------------------------------------------
ch13-4 쓰레드의 구현과 실행 (예제)
-----------------------------------------------------------------------------
ch13-5 쓰레드의 실행 - start()
- 쓰레드를 생성한 후에 start()를 호출해야 쓰레드가 작업을 시작한다.
	ThreadEx1_1 t1 = new ThreadEx1_1();	//쓰레드 t1을 생성한다.
	ThreadEx1_1 t2 = new ThreadEx1_1();	//쓰레드 t2을 생성한다.

	t1.start();	//쓰레드 t1을 실행시킨다.
	t2.start();	//쓰레드 t2을 실행시킨다.
-----------------------------------------------------------------------------
ch13-6 start()와 run()
class ThreadTest {
	public static void main(String args[]) {
		MyThread t1 = new MyThread();
		t1.start();
	}
}

class MyThread extends Thread {
	public void run() {
		//...
	}
}
-----------------------------------------------------------------------------
ch13-7 main쓰레드
- main메서드의 코드를 수행하는 쓰레드
public class Hello {
	public static void main(String[] args) {
		System.out.println("Hello, world.");
	}
}

- 쓰레드는 '사용자 쓰레드'와 '데몬 쓰레드'(보조 쓰레드) 두 종류가 있다.

실행 중인 사용자 쓰레드가 하나도 없을 때 프로그램은 종료된다.
-----------------------------------------------------------------------------
ch13-8 싱글쓰레드와 멀티쓰레드
- 싱글쓰레드
class ThreadTest {
	public static void main(String args[]) {
		for(int i=0; i< 300; i++) {
			System.out.println("-");
		}

		for(int i=0; i< 300; i++) {
			System.out.println("l");
		}
	}	//main
}

- 멀티쓰레드
class ThreadTest {
	public static void main(String args[]) {
		MyThread1 th1 = new MyThread1 ();
		MyThread2 th2 = new MyThread2 ();
		th1.start();
		th2.start();
	}
}

class MyThread1 extends Thread {
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.println("-");
		}
	} // run()
}

class MyThread2 extends Thread {
	public void run() {
		for(int i = 0; i < 300; i++) {
			System.out.println("|");
		}
	} // run()
}
-----------------------------------------------------------------------------
ch13-9~10 싱글쓰레드와 멀티쓰레드 (예제)
-----------------------------------------------------------------------------
ch13-11 쓰레드의 I/O 블락킹(blocking)

class ThreadEx6 {
	public static void main(String[] args) {
		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다.");

	for(int i=10; i > 0; i --) {
		System.out.println(i);
		try { Thread.sleep(1000) }
		catch( Exception e) { }
	}	//main
}

class ThreadEx7 {
	public static void main(String[] args) {
		ThreadEx7_1 th1 = new ThreadEx7_1();
		thr1.start();

		String input = JOptionPane.showInputDialog("아무 값이나 입력하세요.");
		System.out.println("입력하신 값은 " + input + "입니다.");
	}
}

class ThreadEx7_1 extends Thread {
	public void run() {
		for(int i=10; i > 0; i--) {
			System.out.println(i);
			try { sleep(1000); } catch(Exception e ) {}
		}
	}// run()
}
-----------------------------------------------------------------------------
ch13-12~13 쓰레드의 I/O 블락킹(blocking) (예제)
-----------------------------------------------------------------------------
ch13-14 쓰레드의 우선순위(priority of thread)
- 작업의 중요도에 따라 쓰레드의 우선순위를 다르게 하여 특정 쓰레드가 더 많은 작업시간을 갖게 할 수 있다.
void setPriority(int newPriority)	쓰레드의 우선순위를 지정한 값으로 변경한다.
int getPriority()			쓰레드의 우선순위를 반환한다.

public static final int MAX_PRIORITY = 10	// 최대우선순위
public static final int MIN_PRIORITY = 1	// 최소우선순위
public static final int NORM_PRIORITY = 5	// 보통우선순위
-----------------------------------------------------------------------------
ch13-15 쓰레드의 우선순위(priority of thread) (예제)
-----------------------------------------------------------------------------
ch13-16 쓰레드 그룹
- 서로 관련된 쓰레드를 그룹으로 묶어서 다루기 위한 것
- 모든 쓰레드는 반드시 하나의 쓰레드 그룹에 포함되어 있어야 한다.
- 쓰레드 그룹을 지정하지 않고 생성한 쓰레드는 'main쓰레드 그룹'에 속한다.
- 자신을 생성한 쓰레드(부모 쓰레드)의 그룹과 우선순위를 상속받는다.
Thread(ThreadGroup group, String name)
Thread(ThreadGroup group, Runnable target)
Thread(ThreadGroup group, Runnable target, String name)
Thread(ThreadGroup group, Runnable target, String name, long stackSize)

ThreadGroup getThreadGroup()	쓰레드 자신이 속한 쓰레드 그룹을 반환한다.
void uncaughtException(Thread t, Throwable e) 처리되지 않은 예외에 의해 쓰레드 그룹의 쓰레드가 실행이 종료되었을 때, JVM에 의해 이 메서드가 자동적으로 호출된다.
-----------------------------------------------------------------------------
ch13-17 쓰레드 그룹의 메서드
<그림 ch13-17-1 참고>
-----------------------------------------------------------------------------
ch13-18 데몬 쓰레드(daemon thread)
- 일반 쓰레드(non-daemon thread)의 작업을 돕는 보조적인 역할을 수행.
- 일반 쓰레드가 모두 종료되면 자동적으로 종료된다.
- 가비지 컬렉터, 자동저장, 화면 자동갱신 등에 사용된다.
- 무한루프와 조건문을 이용해서 실행 후 대기하다가 특정조건이 만족되면
   작업을 수행하고 다시 대기하도록 작성한다.

	boolean isDaemon() - 쓰레드가 데몬 쓰레드인지 확인한다. 데몬 쓰레드이면 true를 반환
	void setDaemon(boolean on) - 쓰레드를 데몬 쓰레드로 또는 사용자 쓰레드로 변경, 매개변수 on을 true로 지정하면 데몬 쓰레드가 된다.

* setDaemon(boolean on)은 반드시 start()를 호출하기 전에 실행되어야 한다.
그렇지 않으면 IllegalThreadStateException이 발생한다.
-----------------------------------------------------------------------------
ch13-19 데몬 쓰레드(daemon thread) (예제)
-----------------------------------------------------------------------------
ch13-20 쓰레드의 상태
<그림 ch13-20-1 참고>
-----------------------------------------------------------------------------
ch13-21 쓰레드의 실행제어
- 쓰레드의 실행을 제어할 수 있는 메서드가 제공된다.
  이 들을 활용해서 보다 효율적인 프로그램의 작성할 수 있다.
<그림 ch13-21-1 참고>