ch 6-1 객체지향 언어 (6장과 7장이 제일 중요함!)
'80년 초 소프트웨어의 위기 - 빠른 변화를 못 쫓아감
해결책으로 객체지향 언어를 도입(절차적 -> 객체지향)
코드의 재사용성이 높고 유지보수가 용이, 중복 코드 제거
객체지향 언어 = 프로그래밍 언어 + 객체지향개념(규칙)

객체지향언어(Object Oriented Programming)의 핵심적인 4가지
1. 캡슐화
2. 상속
3. 추상화
4. 다형성
-----------------------------------------------------------------------------
ch6-2 클래스와 객체
Q. 클래스가 왜 필요한가? (한마디로 설계도라고 생각하면됨)
A. 객체를 생성하기 위해 (객체는 제품이라고 생각하면 됨)

Q. 객체가 왜 필요한가?
A. 객체를 사용하기 위해

Q. 객체를 사용한다는 것은?
A. 객체가 가진 속성(변수) 과 기능(메서드) 을 사용 하려고

클래스의 정의 : 객체를 정의해 놓은 것
클래스의 용도 : 객체를 생성하는데 사용

객체의 정의 : 실제로 존재하는 것. 사물 또는 개념
객체의 용도 : 객체가 가지고 있는 기능과 속성에 따라 다름

   클래스		객체
제품 설계도	제품
TV 설계도	TV
붕어빵 기계 	붕어빵
-----------------------------------------------------------------------------
ch6-3 객체의 구성요소 - 속성과 기능
객체 = 속성(변수) + 기능(메서드)
속성 : 크기, 길이, 높이, 색상, 볼륨, 채널 등
기능 : 켜기, 끄기, 볼륨 높이기, 볼륨 낮추기, 채널 변경하기
-----------------------------------------------------------------------------
ch6-4 객체와 인스턴스
객체 : 모든 인스턴스를 대표하는 일반적 용어
인스턴스 : 특정 클래스로부터 생성된 객체(예: Tv인스턴스)

          (인스턴스화)
클래스       →        인스턴스(객체)
-----------------------------------------------------------------------------
ch6-5 하나의 소스파일에 여러 클래스 작성

1. (잘된 예) public class가 있는 경우, 소스파일의 이름은 반드시 public class의 이름과 일치해야한다.
Hello2.java
public class Hello2 {}
	class Hello3 {}

2. (잘된 예) public class가 하나도 없는 경우, 소스파일의 이름은 'Hello2.java', 'Hello3.java' 둘다 가능하다.
Hello2.java
class Hello2 {}
class Hello3 {}

3. (잘못된 예) 하나의 소스파일에 둘 이상의 public class가 존재하면 안된다. 각 클래스를 별도의 소스파일에 나눠서 저장하던가, 아니면 둘 중의 한 클래스에 public을 붙이지 않아야 한다.
Hello2.java
public class Hello2 {}
public class Hello3 {}

4. (잘못된 예) 소스파일의 이름이 public class의 이름과 일치하지 않는다. 소스파일의 이름을 'Hello2.java'로 변경해야 맞다.
Hello3.java
public class Hello2 {}
         class Hello3 {}

5. (잘못된 예) 소스파일의 이름과 public, class의 이름이 일치하지 않는다. 대소문자를 구분하므로 대소문자까지 일치해야한다. 그래서, 소스파일의 이름에서 'h'를 'H'로 바꿔야 한다.
hello3.java
public class Hello2 {}
         class Hello3 {}
-----------------------------------------------------------------------------
ch6-6 객체의 생성과 사용
1. 객체의 생성
클래스명 변수명;	// 클래스의 객체를 참조하기 위한 참조변수를 선언
변수명 = new 클래스명();	// 클래스의 객체를 생성 후, 객체의 주소를 참조변수에 저장

Tv t;	// Tv클래스 타입의 참조변수 t를 선언
t = new Tv();	// Tv인스턴스를 생성한 후, 생성된 Tv인스턴스의 주소를 t에 저장

2. 객체의 사용
t.channel = 7;	// Tv인스턴스의 멤버변수 channel의 값을 7로 한다.
t.channelDown();	// Tv인스턴스의 메서드 chaneelDown()을 호출한다.
System.out.println("현재 채널은 " + t.channel + " 입니다.");

항상 객체를 사용할때에는 아래의 순서대로 사용한다!
클래스(설계도) 작성 → 객체(제품) 생성 → 객체(제품) 사용
class Tv { //Tv 클래스 (설계도)
	// 멤버 변수 3개
	String color;	//색깔
	boolean power;	//전원상태
	int channel;	// 채널

	//메서드 3개
	void power()	{ power = !power; }
	void channelUp()	{ channel++; }
	void channelDown() { channel--; }
}
-----------------------------------------------------------------------------
ch6-7 객체의 생성과 사용 - 예제
Tv t1 = new Tv();
Tv t2 = new Tv();
t1.channel = 7;
System.out.println("t1의 channel값은 " + t1.channel + "입니다.);
System.out.println("t2의 channel값은 " + t2.channel + "입니다.);

GC (가비지 컬렉터) 청소부....? 주기적으로 메모리를 확인하여, 사용할수 없는 객체들을 찾으면 지워준다.

하나의 인스턴스를 여러개의 참조변수가 가리키는 경우 (가능)
여러 인스턴스를 하나의 참조변수가 가리키는 경우 (불가능)
-----------------------------------------------------------------------------
ch6-8 객체배열
객체 배열 == 참조변수 배열
 Tv tv1, tv2, tv3; → Tv[] tvArr = new Tv[3];
Tv[] tvArr = new Tv[3];	// 길이가 3인 Tv타입의 참조변수 배열

//객체를 생성해서 배열의 각 요소에 저장
tvArr[0] = new Tv();
tvArr[1] = new Tv();
tvArr[2] = new Tv();

Tv[] tvArr = { new Tv(), new Tv(), new Tv() };

Tv t1 = new Tv();
Tv t2 = new Tv();
Tv t3 = new Tv();

Tv[] tvArr = new Tv[3]; //객체배열 tvArr는 참조변수
tvArr[0] = new Tv(): // 많은 학생들이 이부분을 놓치는 경우가 많으니 반드시 넣을것!!
tvArr[1] = new Tv():
tvArr[2] = new Tv():
-----------------------------------------------------------------------------
ch6-9 클래스의 정의(1)
 클래스 == 데이터 + 함수

클래스는 1. 설계도 2. 데이터 + 함수 3. 사용자 정의 타입 으로 볼수있다.

1. 변수 : 하나의 데이터를 저장할 수 있는 공간
2. 배열 : 같은 종류의 여러 데이터를 하나로 저장할 수 있는 공간
3. 구조체 : 서로 관련된 여러 데이터(종류 관계X)를 하나로 저장할 수 있는 공간
4. 클래스 : 데이터와 함수의 결합(구조체 + 함수)
-----------------------------------------------------------------------------
ch6-10 클래스의 정의(2)
 사용자 정의 타입 - 원하는 타입을 직접 만들 수 있다.

class Time{
	int hour;
	int minute;
	int second;
}

예시1)
클래스 사용 전
int hour;
int minute;
int second;

클래스 사용 후
Time t = new Time();

예시2)
클래스 사용 전
int hour1, hour2, hour3;
int minute1, minute2, minute3;
int second1, second2, second3;

클래스 사용 후
Time t1 = new Time();
Time t2 = new Time();
Time t3 = new Time();

예시3)
클래스 사용 전
int[] hour = new int[3]; 
int[] minute= new int[3];
int[] second= new int[3];

클래스 사용 후
Time[] t = new Time[3];
t[0] = new Time();
t[1] = new Time();
t[2] = new Time();

만약 12시 34분 56초를 저장하고 싶다?
클래스를 사용하지 않으면 이렇게... (비 객체지향적인 코드)
int hour = 12;
int minute = 34;
int second = 56;

클래스를 사용하면 (객체지향적인 코드)
Time t = new Time();
t.hour = 12;
t.minute = 34;
t.second = 56;
-----------------------------------------------------------------------------
ch6-11 선언위치에 따른 변수(타입)의 종류
class Variables //클래스 영역 (선언문만 가능)
{
	int iv;	//인스턴스 변수 (변수 선언)
	static int cv;	//클래스 변수(static변수, 공유변수)

	void method() //메서드 영역 (메소드 선언)
	{
		int lv = 0;		//지역변수 (Local Variable) (메서드 종료시 자동 제거)
	}
}

변수의 종류	선언 위치			생성 시기
클래스 변수	클래스 영역		클래스가 메모리에 올라갈 때
인스턴스 변수	클래스 영역		인스턴스가 생성되었을 때(제일 중요)
지역변수		클래스 영역 이외의 영역	변수 선언문이 수행되었을 때

클래스 변수는 객체생성 필요없지만, 인스턴스 변수는 객체생성이 필요하다.
쉽게 설명하자면, cv는 아무때나 사용하면 되지만, iv는 객체생성을 해야 iv가 만들어지기때문에 객체 생성 후, 사용가능

객체는 iv변수 묶음이며, 클래스 변수는 객체생성 필요없음 iv는 인스턴스가 생성될때 생성된다.
-----------------------------------------------------------------------------
ch6-12 클래스 변수와 인스턴스 변수
선언위치
영역 - 클래스영역 : iv, cv
         메서드 영역 : lv

예) 카드에서 숫자, 무늬, 폭, 높이 라는 속성이 있으며, 숫자랑 무늬는 개별속성으로 이루어져야한다. (객체마다 다르게 유지되어야 함) 높이랑 폭은 모든 객체공통

class Card {
	String kind;	//무늬 (개별 속성) (iv)
	int number;	//숫자 (개별 속성) (iv)

	static int width = 100; //폭 (공통 속성) (cv)
	static int height = 250; //높이 (공통 속성) (cv)
}

Crad c = new Card(); //객체 생성
c.kind = "HEART";	//객체 사용
c.number = 5;	//객체 사용
Card.width = 200;	//객체 사용, 공통속성 같은경우에는 이렇게 작성하는게 Best
Card.height = 300;	//객체 용, 공통속성 같은경우에는 이렇게 작성하는게 Best
-----------------------------------------------------------------------------
ch6-13 클래스 변수 (예제)
-----------------------------------------------------------------------------
ch6-14 메서드란?
1. 문장들을 묶어놓은 것.
- 작업 단위로 문장들의 묶어서 이름 붙인 것

2. 값(입력)을 받아서 처리하고, 결과를 반환(출력)
int add(int x, int y) { //int는 반환타입(출력), add는 메서드 이름, x와 y는 매개변수선언 (입력)
	int result = x + y;

	return result; //결과를 반환
}

메서드는 class안에 있어야하고, 함수는 독립적인 존재이며 메서드랑 함수는 근본적으로는 같다!

메서드의 장점
- 코드의 중복을 줄일 수 있다.
- 코드의 관리가 쉽다.
- 코드를 재사용할 수 있다.
- 코드가 간결해서 이해하기 쉬워진다.

메서드의 작성
- 반복적으로 수행되는 여러 문장을 메서드로 작성

메서드 = 선언부 + 구현부
반환타입 메서드 이름 (타입 변수명, 타입 변수명, ...) //선언부
{
	//메서드 호출 시 수행될 코드 (구현부)
}

int add(int a, int b) //반환 타입이 없을경우 int가 아닌 void로 수정
{
	int result = a + b;
	return result;	// 호출한 메서드로 결과를 반환한다.
}
-----------------------------------------------------------------------------
ch6-15 메서드의 구현부
지역변수(lv) : 메서드 내에 선언된 변수

int add(int x, int y) {	//메서드 영역
	int result = x + y;	//메서드 영역
	return result;	//메서드 영역
}

int multiply(int x, int y) {	//메서드 영역
	int result = x * y;	//메서드 영역
	return result;	//메서드 영역
}
-----------------------------------------------------------------------------
ch6-16 메서드의 구현부 (예제)
-----------------------------------------------------------------------------
ch6-17 메서드의 호출
메서드를 불러다가 작업을 하는것!
메서드이름(값1, 값2, ...);	//메서드를 호출하는 방법

print99danAll();	// void print99danAll()을 호출, 반환타입이 void이므로 출력이 없다. 내가 작업을 하고 결과를 줄것이 없다!
int result = add(3, 5);	//int add(int x, int y)를 호출하고, 결과를 result에 저장
-----------------------------------------------------------------------------
ch6-18 메서드의 실행흐름
MyMath mm = new MyMath();	//먼저 인스턴스를 생성한다.
long value = mm.add(1L, 2L);	//메서드를 호출한다.

long add(long a, long b) {
	long result = a + b;
	return result;
}

1. main 메서드에서 메서드 add를 호출한다. 인수1L과 2L이 메서드 add의 매개변수 a, b에 각각 복사(대입)된다.
2. 메서드 add의 괄호{}안에 있는 문장들이 순서대로 수행된다.
3. 메서드 add의 모든 문장이 실행되거나 return문을 만나면, 호출한 메서드(main 메서드)로 되돌아 와서 이후의 문장들을 실행한다.
-----------------------------------------------------------------------------
ch6-19 메서드의 실행흐름 (예제)
-----------------------------------------------------------------------------
ch6-20 return문
실행 중인 메서드를 종료하고 호출한 곳으로 되돌아간다.

void printGugudan(int dan) {
	if(!(2 <= dan && dan <= 9))
		return;	//dan의 값이 2~9가 아닌경우, 호출한 곳으로 그냥 되돌아 간다.

	for(int i=1; i<=9; i++) {
		System.out.printf("%d * %d = %d\n", dan, i, dan * i);
	}
	return;	//반환 타입이 void이므로 생략 가능, 컴파일러가 자동추가
}

반환타입이 void가 아닌 경우, 반드시 return문 필요
int multiply(int x, int y) {
	int result = x * y;
	return result;	// 반환 타입이 void가 아니므로 생략불가
}

int max(int a, int b)	 {
	if(a < b)
		return a; //조건식이 참일 때만 실행된다.
	else
		return b; //조건식이 거짓일 때 실행된다.
}
-----------------------------------------------------------------------------
ch6-21 반환값
반환타입이 void가 아닐때
int add(int x, int y) {		int add(int x, int y) {
	int result = x + y;			return x + y;
	return result;		}
}

int result = mm.add(3, 5);
	int add(int x, int y) {
		return x + y;
	}
-----------------------------------------------------------------------------
ch6-22 호출 스택(call stack) (제일 중요하며, 이걸 이해하지 못하면 다음 진도부터 차질이 생김!!)
 스택(stack): 밑이 막힌 상자. 위에 차곡차곡 쌓인다.
메서드 수행에 필요한 메모리가 제공되는 공간
메서드가 호출되면 호출스택에 메모리 할당, 종료되면 해제

아래 있는 메서드가 위의 메서드를 호출한 것
맨 위의 메서드 하나만 실행 중, 나머 지는 대기중
-----------------------------------------------------------------------------
ch6-23 기본형 매개변수
기본형 매개변수 - 변수의 값을 읽기만 할 수 있다.(read only)
참조형 매개변수 - 변수의 값을 읽고 변경할 수 잇다.(read & write)
-----------------------------------------------------------------------------
ch6-24 참조형 매개변수
기본형 매개변수 - 변수의 값을 읽기만 할 수 있다.(read only)
참조형 매개변수 - 변수의 값을 읽고 변경할 수 있다.(read & write)
-----------------------------------------------------------------------------
ch6-25 참조형 매개변수 (예제)
-----------------------------------------------------------------------------
ch6-26 static 메서드와 인스턴스 메서드
- 인스턴스 메서드
 인스턴스 생성 후, '참조변수.메서드이름()'으로 호출
 인스턴스 멤버(iv, im)와 관련된 작업을 하는 메서드
 메서드 내에서 인스턴스 변수(iv) 사용가능

- static 메서드(클래스메서드) ( 예: Math.random() 같은것들 )
 객체생성없이 '클래스이름.메서드이름()' 으로 호출
 인스턴스 멤버(iv, im)와 관련없는 작업을 하는 메서드
 메서드 내에서 인스턴스 변수(iv) 사용불가

한마디로 iv사용하면 인스턴스 매서드, iv를 사용하지 않으면 static 매서드
-----------------------------------------------------------------------------
ch6-27 static 메서드와 인스턴스 메서드
class MyMath2 {
	long a, b; // iv 인스턴스 변수

	long add() { //인스턴스 메서드, 매개변수 사용안함, iv사용
		return a + b; // 지역변수가 없으므로, iv이다.
	}

	static long add(long a, long b) {	//클래스 메서드 (statis 메서드), a와b 는 lv 지역변수
		return a + b;	여기서 또한 a와b는 lv(지역변수) 이다.
	}
}

class MtMathTest2 {
	public static void main(String args[]) {
		System.out.println(MyMath2.add(200L, 100L));	//클래스 메서드 호출
		MyMath2 mm = new MyMath2();	//인스턴스 생성 (iv 생성)
		mm.a = 200L;
		mm.b = 100L;
		System.out.println(mm.add());	//인스턴스메서드 호출, mm은 참조변수
				// 참조변수.매서드이름();
	}
}

언제 static 메서드를 만드냐? iv를 사용하지 않을때
객체란? iv묶음 (인스턴스 벨류 묶음)
iv란? 변수 묶음
-----------------------------------------------------------------------------
ch6-28 static을 언제 붙여야 할까?
- 속성(멤버 변수) 중에서 공통 속성에 static을 붙인다.
class Card {
	String kind; //무늬
	int number; //숫자

	static int width = 100;	//폭
	static int height = 250;	//높이
}

- 인스턴스 멤버(iv, im)을 사용하지 않는 메서드에 static을 붙인다.
class MyMath2 {
	long a, b;

		long add()		{ return a + b }; // a, b는 인스턴스 변수
	static long add(long a, long b)	{ return a+ b }; //a, b는 지역변수
}
-----------------------------------------------------------------------------
ch6-29 메서드 간의 호출과 참조
- static 메서드는 인스턴스 변수(iv)를 사용할 수 없다.
class TestClass2 {
	int iv;	//인스턴스 변수
	static int cv;	//클래스 변수

	void instanceMethod() {	//인스턴스 메서드 (객체 생성 후 호출 가능)
		System.out.println(iv);	//인스턴스 변수를 사용할 수 잇다.
		System.out.println(cv);	//클래스 변수를 사용할 수 있다.
	}

	static void staticMethod() {	//static 메서드 (객체 생성 없이 호출 가능)
		System.out.println(iv);	//에러!!! 인스턴스 변수를 사용할 수 없다.
		System.out.println(cv);	//클래스 변수는 사용할 수 있다.
	}
}	// end of class

- static 메서드는 인스턴스 메서드(im)를 호출할 수 없다.
class TestClass {
	void instanceMethod() {}	// 인스턴스메서드
	static void staticMethod() {}	// static 메서드

	void instanceMethod2() {	// 인스턴스메서드
		instanceMethod();	// 다른 인스턴스 메서드를 호출한다.
		staticMethod();	// static 메서드를 호출한다.
	}

	static void staticMethod2() {	//static메서드
		instanceMethod();	//에러!!! 인스턴스 메서드를 호출할 수 없다.
		staticMethod();	// static메서드는 호출 할 수 있다.
	}
}	//end of class

Q. static 메서드는 static 메서드 호출 가능?
A. Yes

Q. static 메서드는 인스턴스 변수(iv) 사용가능?
A. No
인스턴스 변수는 객체를 생성해야 사용이 가능
객체라는 자체가 iv묶음이기 때문에 iv를 사용하려면 객체를 생성해야 사용가능한데, static 메서드는 언제나 호출이 가능 하기때문에 인스턴스 변수를 사용할수 없음.

Q. static 메서드는 인스턴스 메서드 호출가능?
A. 아니요.
인스턴스 메서드라는건 iv로 작업을 하는건데 iv를 필요로 하기때문에 안된다

Q. 왜? static 메서드는 인스턴스 멤버를 쓸 수 없나요?
A. static 메서드 호출 시 객체(iv묶음)가 없을 수도 있어서 (static 메서드는 항상 호출 가능)
-----------------------------------------------------------------------------
ch6-30 오버로딩(overloading)
한 클래스 안에 같은 이름의 메서드 여러개 정의하는 것.
매서드 : 매서드이름 = 1:1

오버로딩이 성립하기 위한 조건
1. 메서드 이름이 같아야 한다.
2. 매개변수의 개수 또는 타입이 달라야 한다.
3. 반환 타입은 영향없다.

메서드 이름만 같기 때문에 오버로딩이 아님
int add(int a, int b) { return a+b; }
int add(int x, int y) { return x+y; }

반환 타입에 영향이 있으므로, 오버로딩이 아님.
int add(int a, int b) { return a+b; }
long add(int a, int b) { return (long)(a+b); }

메서드 이름이 같고, 매개변수의 타입이 다르고, 반환타입에는 영향이 없으므로, 오버로딩이다.
long add(int a, long b) { return a+b; }
long add(long a, int b) { return a+b; }
-----------------------------------------------------------------------------
ch6-31 오버로딩(overloading) (예제)
오버로딩의 올바른 예 - 매개변수는 다르지만 같은 의미의 기능수행
class MyMath3 {
	int add(int a, int b) {
		System.out.print("int add(int a, int b) - ");
		return a+b;
	}

	long add(long a, long b) {
		System.out.print("long add(long a, long b) - ");
		return a+b;
	}

	int add(int[] a) {	// 배열의 모든 요소의 합을 결과로 돌려준다.
		System.out.print("int add(int[] a) - ");
		int result = 0; 
		for(int i=0; i < a.length; i++)
			result += a[i];

		return result;
	}
}
-----------------------------------------------------------------------------
6-32 생성자(constructor)
 인스턴스가 생성될 때마다 호출되는 '인스턴스 초기화 메서드' (인스턴스 = 객체(iv묶음))
 인스턴스 생성시 수행할 작업(iv 초기화)에 사용

iv초기화
Time.t = new Time():
t.hour = 12;
t.minute = 34;
t.second = 56;

Time t = new Time(12,34,56); //생성자 호출

 이름이 클래스 이름과 같아야 한다.
 리턴값이 없다. (void 안붙임)
 모든 클래스는 반드시 생성자를 가져야 한다.
Card c = new Card(); // Card()는 생성자 호출
클래스이름(타입 변수명, 타입 변수명, ... ) { //클래스 이름이 생성자 이름
	//인스턴스 생성 시 수행될 코드,
	// 주로 인스턴스 변수의 초기화 코드를 적는다.
}

class Card { 
	...
	Card() {	// 매개변수 없는 생성자.
		//인스턴스 초기화 작업
	}

	Card(String kind, int number) {	//매개변수 있는 생성자
		// 인스턴스 초기화 작업
	}
}
-----------------------------------------------------------------------------
ch6-33 기본 생성자(default constructor)
 - 매개변수가 없는 생성자
 - 생성자가 하나도 없을 때만, 컴파일러가 자동 추가

 클래스이름() {}	//기본 생성자
 Point() {}		// Point클래스의 기본 생성자

class Data_1 { //생성자 0개
	int value;
//	Data_1() {} // 컴파일러가 생성자를 자동으로 추가함
}

class Data_2 { //생성자 1개
	int value;

	Data_2(int x) {	//매개변수가 있는 생성자
		value = x;
	}
}

class Ex6_11 {
	public static void main(String[] args) {
		Data_1 d1 = new Data_1();
		Data_2 d2 = new Data_2();	//compile error 발생
	}
}
-----------------------------------------------------------------------------
ch6-34 매개변수가 있는 생성자
class Car {
	String color;	//색상
	String gearType;	//변속기 종류 - auto(자동), manual(수동)
	int door;		//문의 개수

	Car() {}	// 기본 생성자
	Car(String c, String g, int d) {	// 매개변수가 있는 생성자
		color = c;
		gearType = g;
		door = d;
	}
}

Car c = new Car("white", "auto", 4);
-----------------------------------------------------------------------------
ch6-34 매개변수가 있는 생성자 (예제)
-----------------------------------------------------------------------------
ch6-36 생성자 this()
 - 생성자에서 다른 생성자 호출할 때 사용

class Car2 {
	String color;	//색상
	String gearType;	//변속기 종류 - auto(자동), manual(수동)
	int door;		//문의 개수

	Car2() {	// 1번 생성자
		this("white", "auto", 4);
	}

	Car2(String color) { // 2번 생성자
		this(color, "auto", 4);
	}

	Car2(String color, String gearType, int door) { // 3번 생성자
		this.color = color;
		this.gearType = gearType;
		this.door = door;
	}
}
-----------------------------------------------------------------------------
ch6-37 참조변수 this ( ※ this() 생성자 이고, this는 참조변수 절대 헷갈리지 말것)
- 인스턴스 자신을 가리키는 참조변수
- 인스턴스 메서드(생성자 포함) 에서 사용가능
- 지역변수(lv)와 인스턴스 변수(iv)를 구별할 때 사용
- 예) 한 반에 철수라는 얘가 2명이면 앞에 성까지 붙여서 부름. 김철수, 박철수, 안철수
Car(String c, String g, int d) {
	//color는 iv, c는 lv
	color = c;
	gearType = g;
	door = d;
}

Car(String color, String gearType, int door) {
	//this.colors는 iv, color는 lv
	this.color = color;
	this.gearType = gearType;
	this.door = door;
}

this : 인스턴스 자신을 가리키는 참조변수, 인스턴스의 주소가 저장되어 있다.
모든 인스턴스메서드에 지역변수로 숨겨진 채로 존재한다.

this(), this(매개변수) : 생성자, 같은 클래스의 다른 생성자를 호출할 때 사용한다.
※ this와 this()는 비슷하게 생겻을 뿐 완전히 다른 것이다. this는 '참조 변수' 이고, this()는 '생성자' 이다.

class MyMath2 {
	long a, b;	// this.a, this.b (iv의 진짜 이름)

	MyMath2(int a, int b) {	//생성자
		this.a = a;
		this.b = b;
	}
	long add() {	//인스턴스 메서드
		return a + b;	//return this.a + this.b;
	}
	static long add(long a, long b) {	//클래스 메서드 (static 메서드)
		return a + b;
	}
}

생성자, 인스턴스 메서드에서는 this를 붙일수 있지만, 클래스 메서드에서는 this를 붙히지 못한다.
-----------------------------------------------------------------------------
ch6-38 변수의 초기화
- 지역변수(lv)는 수동 초기화 해야함(사용전 꼭!!!)
- 멤버변수(iv, cv)는 자동 초기화 된다.

class InitTest {
	int x;	// 인스턴스 변수
	int y = x;	// 인스턴스 변수

	void method1() {
		int i;	// 지역변수
		int j = i;	// 에러 지역변수를 초기화하지 않고 사용
	}
}
-----------------------------------------------------------------------------
ch6-39 멤버변수의 초기화
1. 명시적 초기화(=) ( 대입연산자를 이용한 간단 초기화 )
class Car {
	int door = 4;	// 기본형(primitive type) 변수의 초기화
	Engine e = new Engine();	//참조형(reference type) 변수의 초기화
	Engine e // 엔진 자리만있고 엔진이 비어있다는것!

2. 초기화 블럭 ( 복잡 초기화 )
iv - 인스턴스 초기화 블럭 : {}
cv - 클래스 초기화 블럭 : static {}

3. 생성자 (iv초기화) 
Car(String color, String gearType, int door) {	//매개변수 있는 생성자
	this.color = color;
	this.gearType = gearType;
	this.door = door;
}

class StaticBlockTest {
	static int[] arr = new int[10];	//명시적 초기화

	// CV 복잡 초기화
	static {	// 클래스 초기화 블럭 - 배열 arr을 난수로 채운다.
		for(int i=0;i<arr.length;i++) {
			arr[i] = (int)(Math.random()*10)+1;
		}
	}
}

- 클래스 변수(cv) 초기화 시점 : 클래스가 처음(메모리에 올라갈때) 로딩될 때 단 한번
- 인스턴스 변수(iv) 초기화 시점 : 인스턴스가 생성될 때 마다

class  InitTest {
	static int cv = 1;	// 명시적 초기화
	int iv = 1;		// 명시적 초기화

	static {	cv = 2; }	// 클래스 초기화 블럭
	{	iv = 2; }	// 인스턴스 초기화 블럭

	InitTest() { //생성자
		iv = 3;
	}
}